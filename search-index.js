var N=null,E="",T="t",U="u",searchIndex={};
var R=["prisma_query","values","ConditionTree","Compare","Select","Insert","Update","Delete","UnionAll","Column","Function","conditiontree","singlerowinsert","is_empty","from_table","Adds `WHERE` conditions to the query. See Comparable for…","order_by","database","asterisk","databasevalue","so_that","compare","groupbydefinition","orderdefinition","prisma_query::error","parameterizedvalue","option","What to use to substitute a parameter in the query.","string","joindata","A comparison expression","result","queryresult","resultrow","try_from","borrow_mut","try_into","type_id","prisma_query::ast","to_owned","clone_into","borrow","typeid","prisma_query::connector","prisma_query::visitor","not_equals","less_than","less_than_or_equals","greater_than","greater_than_or_equals","in_selection","not_in_selection","not_like","begins_with","not_begins_with","ends_into","not_ends_into","is_not_null","not_between","is_null","between","into_group_by_definition","into_order_definition","visit_insert","parameter_substitution","add_parameter","visit_limit_and_offset","visit_aggregate_to_string","with_connection","with_transaction","expression","aggregatetostring","rownumber","function","grouping","insert","onconflict","ordering","tabletype","unionall","column","default","select","update","delete","multirowinsert","formatter","backtrace","Change the order to `ASC`","Change the order to `DESC`","ResultRow","Grouping","Ordering","Expression","OnConflict","TableType","DatabaseValue","ParameterizedValue","RowNumber","SingleRowInsert","MultiRowInsert","Comparable","Conjuctive","Groupable","IntoGroupByDefinition","IntoOrderDefinition","Orderable","Aliasable","ResultSet","ResultRowWithName","Connectional","ToResultRow","Transactional","ResultSetIterator","AggregateToString","GroupByDefinition","OrderDefinition"];

searchIndex[R[0]]={"doc":"prisma-query","i":[[3,R[108],R[0],"Encapsulates a set of results and their respective column…",N,N],[3,R[113],E,"Thin iterator for ResultSet rows. Might become lazy one day.",N,N],[3,R[109],E,"Wraps a result row, so it's columns can be accessed by name.",N,N],[3,R[90],E,E,N,N],[12,R[1],E,E,0,N],[0,"ast",E,"An abstract syntax tree for SQL queries.",N,N],[3,R[9],R[38],"A column definition.",N,N],[12,"name",E,E,1,N],[3,R[7],E,"A builder for a `DELETE` statement.",N,N],[3,R[114],E,E,N,N],[3,"Count",E,E,N,N],[3,R[98],E,E,N,N],[3,R[10],E,"A database function definition",N,N],[3,R[91],E,"A list of definitions for the `GROUP BY` statement",N,N],[12,"0",E,E,2,N],[3,R[5],E,"A builder for an `INSERT` statement.",N,N],[3,R[99],E,E,N,N],[3,R[100],E,E,N,N],[3,"JoinData",E,"The `JOIN` table and conditions.",N,N],[3,R[92],E,"A list of definitions for the `ORDER BY` statement",N,N],[12,"0",E,E,3,N],[3,"Over",E,E,N,N],[3,"Row",E,"A collection of values surrounded by parentheses.",N,N],[12,R[1],E,E,4,N],[3,R[4],E,"A builder for a `SELECT` statement.",N,N],[3,"Table",E,"A table definition",N,N],[12,"typ",E,E,5,N],[12,"alias",E,E,5,N],[12,R[17],E,E,5,N],[3,R[8],E,"A builder for a `UNION ALL` over multiple `SELECT`…",N,N],[12,"0",E,E,6,N],[3,R[6],E,"A builder for an `UPDATE` statement.",N,N],[4,R[3],E,"For modeling comparison expression",N,N],[13,"Equals",E,"`left = right`",7,N],[13,"NotEquals",E,"`left <> right`",7,N],[13,"LessThan",E,"`left < right`",7,N],[13,"LessThanOrEquals",E,"`left <= right`",7,N],[13,"GreaterThan",E,"`left > right`",7,N],[13,"GreaterThanOrEquals",E,"`left >= right`",7,N],[13,"In",E,"`left IN (..)`",7,N],[13,"NotIn",E,"`left NOT IN (..)`",7,N],[13,"Like",E,"`left LIKE %..%`",7,N],[13,"NotLike",E,"`left NOT LIKE %..%`",7,N],[13,"BeginsWith",E,"`left LIKE ..%`",7,N],[13,"NotBeginsWith",E,"`left NOT LIKE ..%`",7,N],[13,"EndsInto",E,"`left LIKE %..`",7,N],[13,"NotEndsInto",E,"`left NOT LIKE %..`",7,N],[13,"Null",E,"`value IS NULL`",7,N],[13,"NotNull",E,"`value IS NOT NULL`",7,N],[13,"Between",E,"`value` BETWEEN `left` AND `right`",7,N],[13,"NotBetween",E,"`value` NOT BETWEEN `left` AND `right`",7,N],[4,R[2],E,"Tree structures and leaves for condition building.",N,N],[13,"And",E,"`(left_expression AND right_expression)`",8,N],[13,"Or",E,"`(left_expression OR right_expression)`",8,N],[13,"Not",E,"`(NOT expression)`",8,N],[13,"Single",E,"A single expression leaf",8,N],[13,"NoCondition",E,"A leaf that does nothing to the condition, `1=1`",8,N],[13,"NegativeCondition",E,"A leaf that cancels the condition, `1=0`",8,N],[4,R[93],E,"A database expression.",N,N],[13,R[2],E,"A tree of expressions to evaluate from the deepest value…",9,N],[13,R[3],E,R[30],9,N],[13,"Value",E,"A single value, column, row or a nested select",9,N],[4,"Id",E,E,N,N],[13,"String",E,E,10,N],[13,"Int",E,E,10,N],[13,"UUID",E,E,10,N],[4,R[94],E,"`INSERT` conflict resolution strategies.",N,N],[13,"DoNothing",E,"When a row already exists, do nothing.",11,N],[4,"Join",E,"A representation of a `JOIN` statement.",N,N],[13,"Inner",E,"Implements an `INNER JOIN` with given `JoinData`.",12,N],[13,"LeftOuter",E,"Implements an `LEFT OUTER JOIN` with given `JoinData`.",12,N],[4,"Order",E,"The ordering direction",N,N],[13,"Asc",E,"Ascending",13,N],[13,"Desc",E,"Descending",13,N],[4,"Query",E,"A database query",N,N],[13,R[4],E,"Query for fetching data. E.g. the `SELECT` query.",14,N],[13,R[5],E,E,14,N],[13,R[6],E,E,14,N],[13,R[7],E,E,14,N],[13,R[8],E,E,14,N],[13,"Raw",E,E,14,N],[4,R[95],E,E,N,N],[13,"Table",E,E,15,N],[13,"Query",E,E,15,N],[4,R[96],E,"A value we can compare and use in database queries.",N,N],[13,"Parameterized",E,"Anything that we must parameterize before querying",16,N],[13,R[9],E,"A database column",16,N],[13,"Row",E,"Data in a row form, e.g. (1, 2, 3)",16,N],[13,R[4],E,"A nested `SELECT` statement",16,N],[13,R[10],E,"A database function call",16,N],[13,"Asterisk",E,"A qualified asterisk to a table",16,N],[4,R[97],E,"A value we must parameterize for the prepared statement.",N,N],[13,"Null",E,"A database null",17,N],[13,"Integer",E,"An integer value",17,N],[13,"Real",E,"A floating point value",17,N],[13,"Text",E,"A string value",17,N],[13,"Boolean",E,"A boolean value",17,N],[13,"Json",E,"A JSON value",17,N],[13,"Uuid",E,E,17,N],[13,"DateTime",E,E,17,N],[5,"aggregate_to_string",E,"Aggregates the given field into a string.",N,[[[T]],[R[71]]]],[5,"count",E,"Count of the underlying table where the given expression…",N,[[[T]],["count"]]],[5,"row_number",E,"A number from 1 to n in specified order",N,[[],[R[72]]]],[5,R[18],E,"A quick alias to create an asterisk to a table.",N,[[],[R[19]]]],[11,"new",E,"Create a column definition.",1,[[["s"]],["self"]]],[11,"table",E,"Include the table name in the column expression.",1,[[["self"],[T]],["self"]]],[11,"opt_table",E,"Include the table name in the column expression, if table…",1,[[["self"],[R[26]]],["self"]]],[11,"alias",E,"Give the column an alias in the query.",1,[[["self"],["s"]],["self"]]],[11,"and",E,"An `AND` statement, is true when both sides are true.",8,[[["e"],["j"]],[R[11]]]],[11,"or",E,"An `OR` statement, is true when one side is true.",8,[[["e"],["j"]],[R[11]]]],[11,"not",E,"A `NOT` statement, is true when the expression is false.",8,[[["e"]],[R[11]]]],[11,"single",E,"A single leaf, is true when the expression is true.",8,[[["e"]],[R[11]]]],[11,"invert_if",E,"Inverts the entire condition tree if condition is met.",8,[[["self"],["bool"]],[R[11]]]],[11,R[14],E,"Creates a new `DELETE` statement for the given table.",18,[[[T]],["self"]]],[11,R[20],E,R[15],18,[[["self"],[T]],["self"]]],[11,R[16],E,"Define the order of the row number. Is the row order if…",19,[[["self"],[T]],["self"]]],[11,"partition_by",E,"Define the partitioning of the row number",19,[[["self"],[T]],["self"]]],[11,"alias",E,"Give the function an alias in the query.",20,[[["self"],["s"]],["self"]]],[11,"new",E,E,2,[[["vec",[R[22]]]],["self"]]],[11,R[13],E,E,2,[[["self"]],["bool"]]],[11,"single_into",E,"Creates a new single row `INSERT` statement for the given…",21,[[[T]],[R[12]]]],[11,"multi_into",E,"Creates a new multi row `INSERT` statement for the given…",21,[[[T],["vec"]],[R[85]]]],[11,"on_conflict",E,"Sets the conflict resolution strategy.",21,[[["self"],[R[76]]],["self"]]],[11,"returning",E,"Sets the returned columns. Works only with PostgreSQL.",21,[[["self"],["vec"]],["self"]]],[11,"value",E,"Adds a new value to the `INSERT` statement",22,[[["self"],["k"],["v"]],[R[12]]]],[11,R[1],E,"Adds a new row to be inserted.",23,[[["self"],["v"]],["self"]]],[11,"new",E,E,3,[[["vec",[R[23]]]],["self"]]],[11,R[13],E,E,3,[[["self"]],["bool"]]],[11,R[13],E,E,24,[[["self"]],["bool"]]],[11,"is_select",E,E,14,[[["self"]],["bool"]]],[11,"is_insert",E,E,14,[[["self"]],["bool"]]],[11,"is_update",E,E,14,[[["self"]],["bool"]]],[11,"is_delete",E,E,14,[[["self"]],["bool"]]],[11,"is_union_all",E,E,14,[[["self"]],["bool"]]],[11,"new",E,E,4,[[],["self"]]],[11,"push",E,E,4,[[["self"],[T]],["self"]]],[11,R[13],E,E,4,[[["self"]],["bool"]]],[11,R[14],E,"Creates a new `SELECT` statement for the given table.",25,[[[T]],["self"]]],[11,"value",E,"Selects a static value as the column.",25,[[["self"],[T]],["self"]]],[11,R[80],E,"Adds a column to be selected.",25,[[["self"],[T]],["self"]]],[11,"columns",E,"A bulk method to select multiple values.",25,[[["self"],["vec"]],["self"]]],[11,R[20],E,R[15],25,[[["self"],[T]],["self"]]],[11,"inner_join",E,"Adds `INNER JOIN` clause to the query.",25,[[["self"],["j"]],["self"]]],[11,"left_outer_join",E,"Adds `LEFT OUTER JOIN` clause to the query.",25,[[["self"],["j"]],["self"]]],[11,R[16],E,"Adds an ordering to the `ORDER BY` section.",25,[[["self"],[T]],["self"]]],[11,"group_by",E,"Adds a grouping to the `GROUP BY` section.",25,[[["self"],[T]],["self"]]],[11,"limit",E,"Sets the `LIMIT` value.",25,[[["self"],["usize"]],["self"]]],[11,"offset",E,"Sets the `OFFSET` value.",25,[[["self"],["usize"]],["self"]]],[11,R[17],E,"Define in which database the table is located",5,[[["self"],[T]],["self"]]],[11,R[18],E,"A qualified asterisk to this table",5,[[["self"]],[R[19]]]],[11,"add",E,"Creates a union with previous and given `SELECT` statement.",6,[[["self"],[R[82]]],["self"]]],[11,"table",E,"Creates the basis for an `UPDATE` statement to the given…",26,[[[T]],["self"]]],[11,"set",E,"Add another column value assignment to the query",26,[[["self"],["k"],["v"]],[R[83]]]],[11,R[20],E,R[15],26,[[["self"],[T]],["self"]]],[6,R[115],E,E,N,N],[6,R[116],E,E,N,N],[8,R[101],E,"An item that can be compared against other values in the…",N,N],[10,"equals",E,"Tests if both sides are the same value.",27,[[["self"],[T]],[R[21]]]],[10,R[45],E,"Tests if both sides are not the same value.",27,[[["self"],[T]],[R[21]]]],[10,R[46],E,"Tests if the left side is smaller than the right side.",27,[[["self"],[T]],[R[21]]]],[10,R[47],E,"Tests if the left side is smaller than the right side or…",27,[[["self"],[T]],[R[21]]]],[10,R[48],E,"Tests if the left side is bigger than the right side.",27,[[["self"],[T]],[R[21]]]],[10,R[49],E,"Tests if the left side is bigger than the right side or…",27,[[["self"],[T]],[R[21]]]],[10,R[50],E,"Tests if the left side is included in the right side…",27,[[["self"],[T]],[R[21]]]],[10,R[51],E,"Tests if the left side is not included in the right side…",27,[[["self"],[T]],[R[21]]]],[10,"like",E,"Tests if the left side includes the right side string.",27,[[["self"],[T]],[R[21]]]],[10,R[52],E,"Tests if the left side does not include the right side…",27,[[["self"],[T]],[R[21]]]],[10,R[53],E,"Tests if the left side starts with the right side string.",27,[[["self"],[T]],[R[21]]]],[10,R[54],E,"Tests if the left side doesn't start with the right side…",27,[[["self"],[T]],[R[21]]]],[10,R[55],E,"Tests if the left side ends into the right side string.",27,[[["self"],[T]],[R[21]]]],[10,R[56],E,"Tests if the left side does not end into the right side…",27,[[["self"],[T]],[R[21]]]],[10,R[59],E,"Tests if the left side is `NULL`.",27,[[["self"]],[R[21]]]],[10,R[57],E,"Tests if the left side is not `NULL`.",27,[[["self"]],[R[21]]]],[10,R[60],E,"Tests if the value is between two given values.",27,[[["self"],[T],["v"]],[R[21]]]],[10,R[58],E,"Tests if the value is not between two given values.",27,[[["self"],[T],["v"]],[R[21]]]],[8,R[102],E,"`AND`, `OR` and `NOT` conjuctive implementations.",N,N],[10,"and",E,"Builds an `AND` condition having `self` as the left leaf…",28,[[["self"],["e"]],[R[11]]]],[10,"or",E,"Builds an `OR` condition having `self` as the left leaf…",28,[[["self"],["e"]],[R[11]]]],[10,"not",E,"Builds a `NOT` condition having `self` as the condition.",28,[[["self"]],[R[11]]]],[8,R[103],E,"An item that can be used in the `GROUP BY` statement",N,N],[10,"group",E,"Group by `self`",29,[[["self"]],[R[22]]]],[8,R[104],E,"Convert the value into a group by definition.",N,N],[10,R[61],E,E,30,[[["self"]],[R[22]]]],[8,"Joinable",E,"An item that can be joined.",N,N],[10,"on",E,"Add the `JOIN` conditions.",31,[[["self"],[T]],[R[29]]]],[8,R[105],E,"Convert the value into an order definition with order item…",N,N],[10,R[62],E,E,32,[[["self"]],[R[23]]]],[8,R[106],E,"An item that can be used in the `ORDER BY` statement",N,N],[10,"order",E,"Order by `self` in the given order",33,[[["self"],[R[26],["order"]]],[R[23]]]],[11,"ascend",E,R[88],33,[[["self"]],[R[23]]]],[11,"descend",E,R[89],33,[[["self"]],[R[23]]]],[8,R[107],E,"An object that can be aliased.",N,N],[10,"alias",E,"Alias table for usage elsewhere in the query.",34,[[["self"],[T]],["table"]]],[0,"connector",R[0],E,N,N],[3,"Sqlite",R[43],E,N,N],[11,"new",E,E,35,[[[R[28]],["u32"],["bool"]],[R[32],["sqlite"]]]],[0,"error",R[0],E,N,N],[4,"Error",R[24],E,N,N],[13,"QueryError",E,E,36,N],[13,"NotFound",E,E,36,N],[13,"UniqueConstraintViolation",E,E,36,N],[12,"field_name","prisma_query::error::Error",E,36,N],[13,"ConnectionError",R[24],E,36,N],[13,"ColumnReadFailure",E,E,36,N],[13,"ResultIndexOutOfBounts",E,E,36,N],[13,"ColumnNotFound",E,E,36,N],[13,"ResultTypeMissmatch",E,E,36,N],[0,"visitor",R[0],"Visitors for reading an abstract SQL syntax tree,…",N,N],[3,"Sqlite",R[44],"A visitor for generating queries for an SQLite database.…",N,N],[3,"Postgres",E,E,N,N],[3,"Mysql",E,E,N,N],[8,"Visitor",E,"A function travelling through the query AST, building the…",N,N],[18,"C_BACKTICK",E,"Backtick character to surround identifiers, such as column…",37,N],[18,"C_WILDCARD",E,"Wildcard character to be used in `LIKE` queries.",37,N],[10,"build",E,"Convert the given `Query` to an SQL string and a vector of…",37,N],[10,R[65],E,"When called, the visitor decided to not render the…",37,[[["self"],[R[25]]]]],[10,R[66],E,"The `LIMIT` and `OFFSET` statement in the query",37,[[["self"],[R[26],[R[25]]],[R[26],[R[25]]]],[R[26],[R[28]]]]],[10,R[63],E,"A walk through an `INSERT` statement",37,[[["self"],[R[75]]],[R[28]]]],[10,R[64],E,R[27],37,[[["self"]],[R[28]]]],[10,R[67],E,R[27],37,[[["self"],[R[19]]],[R[28]]]],[11,"visit_parameterized",E,"A visit to a value we parameterize",37,[[["self"],[R[25]]],[R[28]]]],[11,"visit_joins",E,"The join statements in the query",37,[[["self"],["vec",["join"]]],[R[28]]]],[11,"visit_join_data",E,E,37,[[["self"],[R[29]]],[R[28]]]],[11,"visit_select",E,"A walk through a `SELECT` statement",37,[[["self"],[R[82]]],[R[28]]]],[11,"visit_update",E,"A walk through an `UPDATE` statement",37,[[["self"],[R[83]]],[R[28]]]],[11,"visit_delete",E,"A walk through an `DELETE` statement",37,[[["self"],[R[84]]],[R[28]]]],[11,"delimited_identifiers",E,"A helper for delimiting an identifier, surrounding every…",37,[[["vec",[R[28]]]],[R[28]]]],[11,"visit_query",E,"A walk through a complete `Query` statement",37,[[["self"],["query"]],[R[28]]]],[11,"visit_union_all",E,"A walk through a union of `SELECT` statements",37,[[["self"],[R[79]]],[R[28]]]],[11,"visit_columns",E,"The selected columns",37,[[["self"],["vec",[R[19]]]],[R[28]]]],[11,"visit_database_value",E,"A visit to a value used in an expression",37,[[["self"],[R[19]]],[R[28]]]],[11,"visit_table",E,"A database table identifier",37,[[["self"],["table"],["bool"]],[R[28]]]],[11,"visit_column",E,"A database column identifier",37,[[["self"],[R[80]]],[R[28]]]],[11,"visit_row",E,"A row of data used as an expression",37,[[["self"],["row"]],[R[28]]]],[11,"visit_conditions",E,"A walk through the query conditions",37,[[["self"],[R[11]]],[R[28]]]],[11,"visit_expression",E,"An expression that can either be a single value, a set of…",37,[[["self"],[R[70]]],[R[28]]]],[11,"visit_compare",E,R[30],37,[[["self"],[R[21]]],[R[28]]]],[11,"visit_ordering",E,"A visit in the `ORDER BY` section of the query",37,[[["self"],[R[77]]],[R[28]]]],[11,"visit_grouping",E,"A visit in the `GROUP BY` section of the query",37,[[["self"],[R[74]]],[R[28]]]],[11,"visit_function",E,E,37,[[["self"],[R[73]]],[R[28]]]],[11,"visit_partitioning",E,E,37,[[["self"],["over"]],[R[28]]]],[11,"new",R[0],"Creates a new instance, bound to the given column names…",38,[[["columnnames"],["vec",[R[33]]]],["resultset"]]],[11,"column_index",E,"Finds a column index for a name.",38,[[["self"],["str"]],[R[31],["usize","error"]]]],[11,"at",E,"Gets a value by index.",39,[[["self"],["usize"]],[R[31],[R[25],"error"]]]],[11,"at_as_str",E,E,39,[[["self"],["usize"]],[R[31],["str","error"]]]],[11,"at_as_string",E,E,39,[[["self"],["usize"]],[R[31],[R[28],"error"]]]],[11,"at_as_integer",E,E,39,[[["self"],["usize"]],[R[31],["i64","error"]]]],[11,"at_as_real",E,E,39,[[["self"],["usize"]],[R[31],["f64","error"]]]],[11,"at_as_bool",E,E,39,[[["self"],["usize"]],[R[31],["bool","error"]]]],[11,"get",E,"Gets a value by column name.",39,[[["self"],["str"]],[R[31],[R[25],"error"]]]],[11,"get_as_str",E,E,39,[[["self"],["str"]],[R[31],["str","error"]]]],[11,"get_as_string",E,E,39,[[["self"],["str"]],[R[31],[R[28],"error"]]]],[11,"get_as_integer",E,E,39,[[["self"],["str"]],[R[31],["i64","error"]]]],[11,"get_as_real",E,E,39,[[["self"],["str"]],[R[31],["f64","error"]]]],[11,"get_as_bool",E,E,39,[[["self"],["str"]],[R[31],["bool","error"]]]],[6,"QueryResult",E,E,N,N],[8,R[110],E,E,N,N],[10,R[68],E,"Opens a connection, which is valid inside the given…",40,[[["self"],["str"],["f"]],[R[32]]]],[8,R[111],E,E,N,N],[10,"to_result_row",E,E,41,[[["self"]],[R[32],[R[33]]]]],[8,R[112],E,E,N,N],[10,R[69],E,"Opens a connection and a transaction, which is valid…",42,[[["self"],["str"],["f"]],[R[32]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,"into",E,E,38,[[["self"]],[U]]],[11,R[34],E,E,38,[[[U]],[R[31]]]],[11,R[41],E,E,38,[[["self"]],[T]]],[11,R[37],E,E,38,[[["self"]],[R[42]]]],[11,R[35],E,E,38,[[["self"]],[T]]],[11,R[36],E,E,38,[[["self"]],[R[31]]]],[11,"into_iter",E,E,43,[[["self"]],["i"]]],[11,"from",E,E,43,[[[T]],[T]]],[11,"into",E,E,43,[[["self"]],[U]]],[11,R[34],E,E,43,[[[U]],[R[31]]]],[11,R[41],E,E,43,[[["self"]],[T]]],[11,R[37],E,E,43,[[["self"]],[R[42]]]],[11,R[35],E,E,43,[[["self"]],[T]]],[11,R[36],E,E,43,[[["self"]],[R[31]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,"into",E,E,39,[[["self"]],[U]]],[11,R[34],E,E,39,[[[U]],[R[31]]]],[11,R[41],E,E,39,[[["self"]],[T]]],[11,R[37],E,E,39,[[["self"]],[R[42]]]],[11,R[35],E,E,39,[[["self"]],[T]]],[11,R[36],E,E,39,[[["self"]],[R[31]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[39],E,E,0,[[["self"]],[T]]],[11,R[40],E,E,0,N],[11,R[34],E,E,0,[[[U]],[R[31]]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[37],E,E,0,[[["self"]],[R[42]]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[["self"]],[R[31]]]],[11,"from",R[38],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[39],E,E,1,[[["self"]],[T]]],[11,R[40],E,E,1,N],[11,R[34],E,E,1,[[[U]],[R[31]]]],[11,R[41],E,E,1,[[["self"]],[T]]],[11,R[37],E,E,1,[[["self"]],[R[42]]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"]],[R[31]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[39],E,E,18,[[["self"]],[T]]],[11,R[40],E,E,18,N],[11,R[34],E,E,18,[[[U]],[R[31]]]],[11,R[41],E,E,18,[[["self"]],[T]]],[11,R[37],E,E,18,[[["self"]],[R[42]]]],[11,R[35],E,E,18,[[["self"]],[T]]],[11,R[36],E,E,18,[[["self"]],[R[31]]]],[11,"from",E,E,44,[[[T]],[T]]],[11,"into",E,E,44,[[["self"]],[U]]],[11,R[39],E,E,44,[[["self"]],[T]]],[11,R[40],E,E,44,N],[11,R[34],E,E,44,[[[U]],[R[31]]]],[11,R[41],E,E,44,[[["self"]],[T]]],[11,R[37],E,E,44,[[["self"]],[R[42]]]],[11,R[35],E,E,44,[[["self"]],[T]]],[11,R[36],E,E,44,[[["self"]],[R[31]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[["self"]],[U]]],[11,R[39],E,E,45,[[["self"]],[T]]],[11,R[40],E,E,45,N],[11,R[34],E,E,45,[[[U]],[R[31]]]],[11,R[41],E,E,45,[[["self"]],[T]]],[11,R[37],E,E,45,[[["self"]],[R[42]]]],[11,R[35],E,E,45,[[["self"]],[T]]],[11,R[36],E,E,45,[[["self"]],[R[31]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[39],E,E,19,[[["self"]],[T]]],[11,R[40],E,E,19,N],[11,R[34],E,E,19,[[[U]],[R[31]]]],[11,R[41],E,E,19,[[["self"]],[T]]],[11,R[37],E,E,19,[[["self"]],[R[42]]]],[11,R[35],E,E,19,[[["self"]],[T]]],[11,R[36],E,E,19,[[["self"]],[R[31]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[39],E,E,20,[[["self"]],[T]]],[11,R[40],E,E,20,N],[11,R[34],E,E,20,[[[U]],[R[31]]]],[11,R[41],E,E,20,[[["self"]],[T]]],[11,R[37],E,E,20,[[["self"]],[R[42]]]],[11,R[35],E,E,20,[[["self"]],[T]]],[11,R[36],E,E,20,[[["self"]],[R[31]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[39],E,E,2,[[["self"]],[T]]],[11,R[40],E,E,2,N],[11,R[34],E,E,2,[[[U]],[R[31]]]],[11,R[41],E,E,2,[[["self"]],[T]]],[11,R[37],E,E,2,[[["self"]],[R[42]]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"]],[R[31]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[39],E,E,21,[[["self"]],[T]]],[11,R[40],E,E,21,N],[11,R[34],E,E,21,[[[U]],[R[31]]]],[11,R[41],E,E,21,[[["self"]],[T]]],[11,R[37],E,E,21,[[["self"]],[R[42]]]],[11,R[35],E,E,21,[[["self"]],[T]]],[11,R[36],E,E,21,[[["self"]],[R[31]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[34],E,E,22,[[[U]],[R[31]]]],[11,R[41],E,E,22,[[["self"]],[T]]],[11,R[37],E,E,22,[[["self"]],[R[42]]]],[11,R[35],E,E,22,[[["self"]],[T]]],[11,R[36],E,E,22,[[["self"]],[R[31]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[34],E,E,23,[[[U]],[R[31]]]],[11,R[41],E,E,23,[[["self"]],[T]]],[11,R[37],E,E,23,[[["self"]],[R[42]]]],[11,R[35],E,E,23,[[["self"]],[T]]],[11,R[36],E,E,23,[[["self"]],[R[31]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[["self"]],[U]]],[11,R[39],E,E,46,[[["self"]],[T]]],[11,R[40],E,E,46,N],[11,R[34],E,E,46,[[[U]],[R[31]]]],[11,R[41],E,E,46,[[["self"]],[T]]],[11,R[37],E,E,46,[[["self"]],[R[42]]]],[11,R[35],E,E,46,[[["self"]],[T]]],[11,R[36],E,E,46,[[["self"]],[R[31]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[39],E,E,3,[[["self"]],[T]]],[11,R[40],E,E,3,N],[11,R[34],E,E,3,[[[U]],[R[31]]]],[11,R[41],E,E,3,[[["self"]],[T]]],[11,R[37],E,E,3,[[["self"]],[R[42]]]],[11,R[35],E,E,3,[[["self"]],[T]]],[11,R[36],E,E,3,[[["self"]],[R[31]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[39],E,E,24,[[["self"]],[T]]],[11,R[40],E,E,24,N],[11,R[34],E,E,24,[[[U]],[R[31]]]],[11,R[41],E,E,24,[[["self"]],[T]]],[11,R[37],E,E,24,[[["self"]],[R[42]]]],[11,R[35],E,E,24,[[["self"]],[T]]],[11,R[36],E,E,24,[[["self"]],[R[31]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[39],E,E,4,[[["self"]],[T]]],[11,R[40],E,E,4,N],[11,R[34],E,E,4,[[[U]],[R[31]]]],[11,R[41],E,E,4,[[["self"]],[T]]],[11,R[37],E,E,4,[[["self"]],[R[42]]]],[11,R[35],E,E,4,[[["self"]],[T]]],[11,R[36],E,E,4,[[["self"]],[R[31]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[39],E,E,25,[[["self"]],[T]]],[11,R[40],E,E,25,N],[11,R[34],E,E,25,[[[U]],[R[31]]]],[11,R[41],E,E,25,[[["self"]],[T]]],[11,R[37],E,E,25,[[["self"]],[R[42]]]],[11,R[35],E,E,25,[[["self"]],[T]]],[11,R[36],E,E,25,[[["self"]],[R[31]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[39],E,E,5,[[["self"]],[T]]],[11,R[40],E,E,5,N],[11,R[34],E,E,5,[[[U]],[R[31]]]],[11,R[41],E,E,5,[[["self"]],[T]]],[11,R[37],E,E,5,[[["self"]],[R[42]]]],[11,R[35],E,E,5,[[["self"]],[T]]],[11,R[36],E,E,5,[[["self"]],[R[31]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[39],E,E,6,[[["self"]],[T]]],[11,R[40],E,E,6,N],[11,R[34],E,E,6,[[[U]],[R[31]]]],[11,R[41],E,E,6,[[["self"]],[T]]],[11,R[37],E,E,6,[[["self"]],[R[42]]]],[11,R[35],E,E,6,[[["self"]],[T]]],[11,R[36],E,E,6,[[["self"]],[R[31]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[39],E,E,26,[[["self"]],[T]]],[11,R[40],E,E,26,N],[11,R[34],E,E,26,[[[U]],[R[31]]]],[11,R[41],E,E,26,[[["self"]],[T]]],[11,R[37],E,E,26,[[["self"]],[R[42]]]],[11,R[35],E,E,26,[[["self"]],[T]]],[11,R[36],E,E,26,[[["self"]],[R[31]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[39],E,E,7,[[["self"]],[T]]],[11,R[40],E,E,7,N],[11,R[34],E,E,7,[[[U]],[R[31]]]],[11,R[41],E,E,7,[[["self"]],[T]]],[11,R[37],E,E,7,[[["self"]],[R[42]]]],[11,R[35],E,E,7,[[["self"]],[T]]],[11,R[36],E,E,7,[[["self"]],[R[31]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[39],E,E,8,[[["self"]],[T]]],[11,R[40],E,E,8,N],[11,R[34],E,E,8,[[[U]],[R[31]]]],[11,R[41],E,E,8,[[["self"]],[T]]],[11,R[37],E,E,8,[[["self"]],[R[42]]]],[11,R[35],E,E,8,[[["self"]],[T]]],[11,R[36],E,E,8,[[["self"]],[R[31]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[39],E,E,9,[[["self"]],[T]]],[11,R[40],E,E,9,N],[11,R[34],E,E,9,[[[U]],[R[31]]]],[11,R[41],E,E,9,[[["self"]],[T]]],[11,R[37],E,E,9,[[["self"]],[R[42]]]],[11,R[35],E,E,9,[[["self"]],[T]]],[11,R[36],E,E,9,[[["self"]],[R[31]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[39],E,E,10,[[["self"]],[T]]],[11,R[40],E,E,10,N],[11,R[34],E,E,10,[[[U]],[R[31]]]],[11,R[41],E,E,10,[[["self"]],[T]]],[11,R[37],E,E,10,[[["self"]],[R[42]]]],[11,R[35],E,E,10,[[["self"]],[T]]],[11,R[36],E,E,10,[[["self"]],[R[31]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[39],E,E,11,[[["self"]],[T]]],[11,R[40],E,E,11,N],[11,R[34],E,E,11,[[[U]],[R[31]]]],[11,R[41],E,E,11,[[["self"]],[T]]],[11,R[37],E,E,11,[[["self"]],[R[42]]]],[11,R[35],E,E,11,[[["self"]],[T]]],[11,R[36],E,E,11,[[["self"]],[R[31]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[39],E,E,12,[[["self"]],[T]]],[11,R[40],E,E,12,N],[11,R[34],E,E,12,[[[U]],[R[31]]]],[11,R[41],E,E,12,[[["self"]],[T]]],[11,R[37],E,E,12,[[["self"]],[R[42]]]],[11,R[35],E,E,12,[[["self"]],[T]]],[11,R[36],E,E,12,[[["self"]],[R[31]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[39],E,E,13,[[["self"]],[T]]],[11,R[40],E,E,13,N],[11,R[34],E,E,13,[[[U]],[R[31]]]],[11,R[41],E,E,13,[[["self"]],[T]]],[11,R[37],E,E,13,[[["self"]],[R[42]]]],[11,R[35],E,E,13,[[["self"]],[T]]],[11,R[36],E,E,13,[[["self"]],[R[31]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[39],E,E,14,[[["self"]],[T]]],[11,R[40],E,E,14,N],[11,R[34],E,E,14,[[[U]],[R[31]]]],[11,R[41],E,E,14,[[["self"]],[T]]],[11,R[37],E,E,14,[[["self"]],[R[42]]]],[11,R[35],E,E,14,[[["self"]],[T]]],[11,R[36],E,E,14,[[["self"]],[R[31]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[39],E,E,15,[[["self"]],[T]]],[11,R[40],E,E,15,N],[11,R[34],E,E,15,[[[U]],[R[31]]]],[11,R[41],E,E,15,[[["self"]],[T]]],[11,R[37],E,E,15,[[["self"]],[R[42]]]],[11,R[35],E,E,15,[[["self"]],[T]]],[11,R[36],E,E,15,[[["self"]],[R[31]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[39],E,E,16,[[["self"]],[T]]],[11,R[40],E,E,16,N],[11,R[34],E,E,16,[[[U]],[R[31]]]],[11,R[41],E,E,16,[[["self"]],[T]]],[11,R[37],E,E,16,[[["self"]],[R[42]]]],[11,R[35],E,E,16,[[["self"]],[T]]],[11,R[36],E,E,16,[[["self"]],[R[31]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[39],E,E,17,[[["self"]],[T]]],[11,R[40],E,E,17,N],[11,R[34],E,E,17,[[[U]],[R[31]]]],[11,R[41],E,E,17,[[["self"]],[T]]],[11,R[37],E,E,17,[[["self"]],[R[42]]]],[11,R[35],E,E,17,[[["self"]],[T]]],[11,R[36],E,E,17,[[["self"]],[R[31]]]],[11,"to_value",E,E,17,[[["self"]],["value"]]],[11,"from",R[43],E,35,[[[T]],[T]]],[11,"into",E,E,35,[[["self"]],[U]]],[11,R[34],E,E,35,[[[U]],[R[31]]]],[11,R[41],E,E,35,[[["self"]],[T]]],[11,R[37],E,E,35,[[["self"]],[R[42]]]],[11,R[35],E,E,35,[[["self"]],[T]]],[11,R[36],E,E,35,[[["self"]],[R[31]]]],[11,"to_string",R[24],E,36,[[["self"]],[R[28]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,"into",E,E,36,[[["self"]],[U]]],[11,R[34],E,E,36,[[[U]],[R[31]]]],[11,R[41],E,E,36,[[["self"]],[T]]],[11,R[37],E,E,36,[[["self"]],[R[42]]]],[11,R[35],E,E,36,[[["self"]],[T]]],[11,R[36],E,E,36,[[["self"]],[R[31]]]],[11,"as_fail",E,E,36,[[["self"]],["fail"]]],[11,"from",R[44],E,47,[[[T]],[T]]],[11,"into",E,E,47,[[["self"]],[U]]],[11,R[34],E,E,47,[[[U]],[R[31]]]],[11,R[41],E,E,47,[[["self"]],[T]]],[11,R[37],E,E,47,[[["self"]],[R[42]]]],[11,R[35],E,E,47,[[["self"]],[T]]],[11,R[36],E,E,47,[[["self"]],[R[31]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,"into",E,E,48,[[["self"]],[U]]],[11,R[34],E,E,48,[[[U]],[R[31]]]],[11,R[41],E,E,48,[[["self"]],[T]]],[11,R[37],E,E,48,[[["self"]],[R[42]]]],[11,R[35],E,E,48,[[["self"]],[T]]],[11,R[36],E,E,48,[[["self"]],[R[31]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,"into",E,E,49,[[["self"]],[U]]],[11,R[34],E,E,49,[[[U]],[R[31]]]],[11,R[41],E,E,49,[[["self"]],[T]]],[11,R[37],E,E,49,[[["self"]],[R[42]]]],[11,R[35],E,E,49,[[["self"]],[T]]],[11,R[36],E,E,49,[[["self"]],[R[31]]]],[11,"equals",R[38],E,4,[[["self"],[T]],[R[21]]]],[11,R[45],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[46],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[47],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[48],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[49],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[50],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[51],E,E,4,[[["self"],[T]],[R[21]]]],[11,"like",E,E,4,[[["self"],[T]],[R[21]]]],[11,R[52],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[53],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[54],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[55],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[56],E,E,4,[[["self"],[T]],[R[21]]]],[11,R[59],E,E,4,[[["self"]],[R[21]]]],[11,R[57],E,E,4,[[["self"]],[R[21]]]],[11,R[60],E,E,4,[[["self"],[T],["v"]],[R[21]]]],[11,R[58],E,E,4,[[["self"],[T],["v"]],[R[21]]]],[11,"equals",E,E,16,[[["self"],[T]],[R[21]]]],[11,R[45],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[46],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[47],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[48],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[49],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[50],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[51],E,E,16,[[["self"],[T]],[R[21]]]],[11,"like",E,E,16,[[["self"],[T]],[R[21]]]],[11,R[52],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[53],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[54],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[55],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[56],E,E,16,[[["self"],[T]],[R[21]]]],[11,R[59],E,E,16,[[["self"]],[R[21]]]],[11,R[57],E,E,16,[[["self"]],[R[21]]]],[11,R[60],E,E,16,[[["self"],[T],["v"]],[R[21]]]],[11,R[58],E,E,16,[[["self"],[T],["v"]],[R[21]]]],[11,"group",E,E,1,[[["self"]],[R[22]]]],[11,R[61],E,E,1,[[["self"]],[R[22]]]],[11,R[61],R[0],E,50,[[["self"]],[R[22]]]],[11,"order",R[38],E,1,[[["self"],[R[26],["order"]]],[R[23]]]],[11,R[62],E,E,1,[[["self"]],[R[23]]]],[11,R[62],R[0],E,51,[[["self"]],[R[23]]]],[11,"alias",R[38],E,5,[[["self"],[T]],["self"]]],[11,"build",R[44],E,47,N],[11,R[63],E,E,47,[[["self"],[R[75]]],[R[28]]]],[11,R[64],E,E,47,[[["self"]],[R[28]]]],[11,R[65],E,E,47,[[["self"],[R[25]]]]],[11,R[66],E,E,47,[[["self"],[R[26],[R[25]]],[R[26],[R[25]]]],[R[26],[R[28]]]]],[11,R[67],E,E,47,[[["self"],[R[19]]],[R[28]]]],[11,"build",E,E,48,N],[11,R[65],E,E,48,[[["self"],[R[25]]]]],[11,R[64],E,E,48,[[["self"]],[R[28]]]],[11,R[66],E,E,48,[[["self"],[R[26],[R[25]]],[R[26],[R[25]]]],[R[26],[R[28]]]]],[11,R[63],E,E,48,[[["self"],[R[75]]],[R[28]]]],[11,R[67],E,E,48,[[["self"],[R[19]]],[R[28]]]],[11,"build",E,E,49,N],[11,R[63],E,E,49,[[["self"],[R[75]]],[R[28]]]],[11,R[64],E,E,49,[[["self"]],[R[28]]]],[11,R[65],E,E,49,[[["self"],[R[25]]]]],[11,R[66],E,E,49,[[["self"],[R[26],[R[25]]],[R[26],[R[25]]]],[R[26],[R[28]]]]],[11,R[67],E,E,49,[[["self"],[R[19]]],[R[28]]]],[11,R[68],R[43],E,35,[[["self"],["str"],["f"]],[R[32]]]],[11,R[69],E,E,35,[[["self"],["str"],["f"]],[R[32]]]],[11,"next",R[0],E,43,[[["self"]],[R[26]]]],[11,"eq",R[38],E,1,[[["self"],[R[80]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[80]]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[21]]],["bool"]]],[11,"ne",E,E,7,[[["self"],[R[21]]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[11]]],["bool"]]],[11,"ne",E,E,8,[[["self"],[R[11]]],["bool"]]],[11,"eq",E,E,18,[[["self"],[R[84]]],["bool"]]],[11,"ne",E,E,18,[[["self"],[R[84]]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[70]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[70]]],["bool"]]],[11,"eq",E,E,44,[[["self"],[R[71]]],["bool"]]],[11,"ne",E,E,44,[[["self"],[R[71]]],["bool"]]],[11,"eq",E,E,45,[[["self"],["count"]],["bool"]]],[11,"ne",E,E,45,[[["self"],["count"]],["bool"]]],[11,"eq",E,E,19,[[["self"],[R[72]]],["bool"]]],[11,"ne",E,E,19,[[["self"],[R[72]]],["bool"]]],[11,"eq",E,E,20,[[["self"],[R[73]]],["bool"]]],[11,"ne",E,E,20,[[["self"],[R[73]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[74]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[74]]],["bool"]]],[11,"eq",E,E,10,[[["self"],["id"]],["bool"]]],[11,"ne",E,E,10,[[["self"],["id"]],["bool"]]],[11,"eq",E,E,21,[[["self"],[R[75]]],["bool"]]],[11,"ne",E,E,21,[[["self"],[R[75]]],["bool"]]],[11,"eq",E,E,11,[[["self"],[R[76]]],["bool"]]],[11,"eq",E,E,46,[[["self"],[R[29]]],["bool"]]],[11,"ne",E,E,46,[[["self"],[R[29]]],["bool"]]],[11,"eq",E,E,12,[[["self"],["join"]],["bool"]]],[11,"ne",E,E,12,[[["self"],["join"]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[77]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[77]]],["bool"]]],[11,"eq",E,E,13,[[["self"],["order"]],["bool"]]],[11,"eq",E,E,24,[[["self"],["over"]],["bool"]]],[11,"ne",E,E,24,[[["self"],["over"]],["bool"]]],[11,"eq",E,E,14,[[["self"],["query"]],["bool"]]],[11,"ne",E,E,14,[[["self"],["query"]],["bool"]]],[11,"eq",E,E,4,[[["self"],["row"]],["bool"]]],[11,"ne",E,E,4,[[["self"],["row"]],["bool"]]],[11,"eq",E,E,25,[[["self"],[R[82]]],["bool"]]],[11,"ne",E,E,25,[[["self"],[R[82]]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[78]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[78]]],["bool"]]],[11,"eq",E,E,5,[[["self"],["table"]],["bool"]]],[11,"ne",E,E,5,[[["self"],["table"]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[79]]],["bool"]]],[11,"ne",E,E,6,[[["self"],[R[79]]],["bool"]]],[11,"eq",E,E,26,[[["self"],[R[83]]],["bool"]]],[11,"ne",E,E,26,[[["self"],[R[83]]],["bool"]]],[11,"eq",E,E,17,[[["self"],[R[25]]],["bool"]]],[11,"ne",E,E,17,[[["self"],[R[25]]],["bool"]]],[11,"eq",E,E,16,[[["self"],[R[19]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[19]]],["bool"]]],[11,"eq",R[0],E,0,[[["self"],[R[33]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[33]]],["bool"]]],[11,R[81],R[38],E,1,[[],[R[80]]]],[11,R[81],E,E,8,[[],["self"]]],[11,R[81],E,E,19,[[],[R[72]]]],[11,R[81],E,E,2,[[],[R[74]]]],[11,R[81],E,E,3,[[],[R[77]]]],[11,R[81],E,E,24,[[],["over"]]],[11,R[81],E,E,4,[[],["row"]]],[11,R[81],E,E,25,[[],[R[82]]]],[11,R[81],E,E,6,[[],[R[79]]]],[11,R[81],R[0],E,0,[[],[R[33]]]],[11,"clone",R[38],E,1,[[["self"]],[R[80]]]],[11,"clone",E,E,7,[[["self"]],[R[21]]]],[11,"clone",E,E,8,[[["self"]],[R[11]]]],[11,"clone",E,E,18,[[["self"]],[R[84]]]],[11,"clone",E,E,9,[[["self"]],[R[70]]]],[11,"clone",E,E,44,[[["self"]],[R[71]]]],[11,"clone",E,E,45,[[["self"]],["count"]]],[11,"clone",E,E,19,[[["self"]],[R[72]]]],[11,"clone",E,E,20,[[["self"]],[R[73]]]],[11,"clone",E,E,2,[[["self"]],[R[74]]]],[11,"clone",E,E,10,[[["self"]],["id"]]],[11,"clone",E,E,21,[[["self"]],[R[75]]]],[11,"clone",E,E,11,[[["self"]],[R[76]]]],[11,"clone",E,E,46,[[["self"]],[R[29]]]],[11,"clone",E,E,12,[[["self"]],["join"]]],[11,"clone",E,E,3,[[["self"]],[R[77]]]],[11,"clone",E,E,13,[[["self"]],["order"]]],[11,"clone",E,E,24,[[["self"]],["over"]]],[11,"clone",E,E,14,[[["self"]],["query"]]],[11,"clone",E,E,4,[[["self"]],["row"]]],[11,"clone",E,E,25,[[["self"]],[R[82]]]],[11,"clone",E,E,15,[[["self"]],[R[78]]]],[11,"clone",E,E,5,[[["self"]],["table"]]],[11,"clone",E,E,6,[[["self"]],[R[79]]]],[11,"clone",E,E,26,[[["self"]],[R[83]]]],[11,"clone",E,E,17,[[["self"]],[R[25]]]],[11,"clone",E,E,16,[[["self"]],[R[19]]]],[11,"clone",R[0],E,0,[[["self"]],[R[33]]]],[11,"from",R[38],E,1,[[["str"]],[R[80]]]],[11,"from",E,E,1,[[[R[28]]],[R[80]]]],[11,"from",E,E,1,N],[11,"from",E,E,8,[[[R[82]]],[R[11]]]],[11,"from",E,E,14,[[[R[84]]],["query"]]],[11,"from",E,E,9,[[[R[82]]],[R[70]]]],[11,"from",E,E,20,[[[R[72]]],[R[73]]]],[11,"from",E,E,16,[[[R[72]]],[R[19]]]],[11,"from",E,E,20,[[["count"]],[R[73]]]],[11,"from",E,E,16,[[["count"]],[R[19]]]],[11,"from",E,E,20,[[[R[71]]],[R[73]]]],[11,"from",E,E,16,[[[R[71]]],[R[19]]]],[11,"from",E,E,14,[[[R[75]]],["query"]]],[11,"from",E,E,21,[[[R[12]]],[R[75]]]],[11,"from",E,E,21,[[[R[85]]],[R[75]]]],[11,"from",E,E,14,[[[R[12]]],["query"]]],[11,"from",E,E,14,[[[R[85]]],["query"]]],[11,"from",E,E,14,[[[T]],["query"]]],[11,"from",E,E,4,[[["vec"]],["row"]]],[11,"from",E,E,4,N],[11,"from",E,E,4,N],[11,"from",E,E,4,N],[11,"from",E,E,4,N],[11,"from",E,E,14,[[[R[82]]],["query"]]],[11,"from",E,E,5,[[["str"]],["table"]]],[11,"from",E,E,5,N],[11,"from",E,E,5,[[[R[28]]],["table"]]],[11,"from",E,E,5,N],[11,"from",E,E,5,[[[R[82]]],["table"]]],[11,"from",E,E,6,[[[R[82]]],["self"]]],[11,"from",E,E,14,[[[R[79]]],["query"]]],[11,"from",E,E,14,[[[R[83]]],["query"]]],[11,"from",E,E,17,[[["str"]],[R[25]]]],[11,"from",E,E,17,[[["usize"]],["self"]]],[11,"from",E,E,17,[[["i32"]],["self"]]],[11,"from",E,E,17,[[[R[28]]],["self"]]],[11,"from",E,E,17,[[["i64"]],["self"]]],[11,"from",E,E,17,[[["f64"]],["self"]]],[11,"from",E,E,17,[[["bool"]],["self"]]],[11,"from",E,E,17,[[["value"]],["self"]]],[11,"from",E,E,17,[[["uuid"]],["self"]]],[11,"from",E,E,17,[[["datetime",["utc"]]],["self"]]],[11,"from",E,E,16,[[["row"]],["self"]]],[11,"from",E,E,16,[[[R[73]]],["self"]]],[11,"from",E,E,16,[[[T]],[R[19]]]],[11,"from",E,E,16,[[["vec"]],[R[19]]]],[11,"from",R[24],E,36,[[["error"]],["error"]]],[11,"from",E,E,36,[[["fromsqlerror"]],["error"]]],[11,"from",E,E,36,[[["error"]],["error"]]],[11,"into",R[38],E,1,[[["self"]],[R[19]]]],[11,"into",E,E,7,[[["self"]],[R[11]]]],[11,"into",E,E,7,[[["self"]],[R[70]]]],[11,"into",E,E,8,[[["self"]],[R[70]]]],[11,"into",E,E,25,[[["self"]],[R[19]]]],[11,"fmt",R[24],E,36,[[["self"],[R[86]]],[R[31]]]],[11,"hash",R[38],E,10,N],[11,"fmt",E,E,1,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,7,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,8,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,18,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,9,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,44,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,45,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,19,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,20,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,2,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,10,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,21,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,11,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,46,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,12,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,3,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,13,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,24,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,14,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,4,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,25,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,15,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,5,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,6,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,26,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,17,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",E,E,16,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",R[24],E,36,[[["self"],[R[86]]],[R[31]]]],[11,"fmt",R[0],E,0,[[["self"],[R[86]]],[R[31]]]],[11,"to_sql",R[38],E,17,[[["self"]],[R[31],["tosqloutput","rusqlerror"]]]],[11,"name",R[24],E,36,[[["self"]],[R[26],["str"]]]],[11,"cause",E,E,36,[[["self"]],[R[26],["fail"]]]],[11,R[87],E,E,36,[[["self"]],[R[26],[R[87]]]]],[11,"to_sql",R[38],E,17,[[["self"],["type"],["vec"]],[R[31],["isnull","box"]]]],[11,"accepts",E,E,17,[[["type"]],["bool"]]],[11,"to_sql_checked",E,E,17,[[["self"],["type"],["vec"]],[R[31],["isnull","box"]]]],[11,"ascend",E,R[88],33,[[["self"]],[R[23]]]],[11,"descend",E,R[89],33,[[["self"]],[R[23]]]]],"p":[[3,R[90]],[3,R[9]],[3,R[91]],[3,R[92]],[3,"Row"],[3,"Table"],[3,R[8]],[4,R[3]],[4,R[2]],[4,R[93]],[4,"Id"],[4,R[94]],[4,"Join"],[4,"Order"],[4,"Query"],[4,R[95]],[4,R[96]],[4,R[97]],[3,R[7]],[3,R[98]],[3,R[10]],[3,R[5]],[3,R[99]],[3,R[100]],[3,"Over"],[3,R[4]],[3,R[6]],[8,R[101]],[8,R[102]],[8,R[103]],[8,R[104]],[8,"Joinable"],[8,R[105]],[8,R[106]],[8,R[107]],[3,"Sqlite"],[4,"Error"],[8,"Visitor"],[3,R[108]],[3,R[109]],[8,R[110]],[8,R[111]],[8,R[112]],[3,R[113]],[3,R[114]],[3,"Count"],[3,"JoinData"],[3,"Sqlite"],[3,"Postgres"],[3,"Mysql"],[6,R[115]],[6,R[116]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);