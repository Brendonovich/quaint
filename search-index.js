var N=null,E="",T="t",U="u",searchIndex={};
var R=["prisma_query","ConditionTree","Compare","Select","Insert","Update","Delete","Column","Function","conditiontree","singlerowinsert","is_empty","from_table","Adds `WHERE` conditions to the query. See Comparable for…","order_by","database","asterisk","databasevalue","so_that","compare","orderdefinition","parameterizedvalue","string","joindata","A comparison expression","prisma_query::ast","to_owned","clone_into","try_from","borrow_mut","try_into","result","type_id","borrow","typeid","prisma_query::visitor","not_equals","less_than","less_than_or_equals","greater_than","greater_than_or_equals","in_selection","not_in_selection","not_like","begins_with","not_begins_with","ends_into","not_ends_into","is_not_null","not_between","is_null","between","into_order_definition","visit_insert","parameter_substitution","add_parameter","visit_limit","option","visit_offset","expression","rownumber","function","insert","onconflict","ordering","tabletype","column","default","select","update","delete","multirowinsert","formatter","to_value","Change the order to `ASC`","Change the order to `DESC`","Ordering","Expression","OnConflict","TableType","DatabaseValue","ParameterizedValue","RowNumber","SingleRowInsert","MultiRowInsert","Comparable","Conjuctive","Joinable","IntoOrderDefinition","Orderable","Aliasable","JoinData","Postgres","OrderDefinition"];

searchIndex[R[0]]={"doc":"prisma-query","i":[[0,"ast",R[0],"An abstract syntax tree for SQL queries.",N,N],[3,R[7],R[25],"A column definition.",N,N],[12,"name",E,E,0,N],[3,R[6],E,"A builder for a `DELETE` statement.",N,N],[3,"Count",E,E,N,N],[3,"Over",E,E,N,N],[3,R[82],E,E,N,N],[3,R[8],E,"A database function definition",N,N],[3,R[4],E,"A builder for an `INSERT` statement.",N,N],[3,R[83],E,E,N,N],[3,R[84],E,E,N,N],[3,R[91],E,"The `JOIN` table and conditions.",N,N],[3,R[76],E,"A list of definitions for the `ORDER BY` statement",N,N],[12,"0",E,E,1,N],[3,"Row",E,"A collection of values surrounded by parentheses.",N,N],[3,R[3],E,"A builder for a `SELECT` statement.",N,N],[3,"Table",E,"A table definition",N,N],[12,"typ",E,E,2,N],[12,"alias",E,E,2,N],[12,R[15],E,E,2,N],[3,R[5],E,"A builder for an `UPDATE` statement.",N,N],[4,R[2],E,"For modeling comparison expression",N,N],[13,"Equals",E,"`left = right`",3,N],[13,"NotEquals",E,"`left <> right`",3,N],[13,"LessThan",E,"`left < right`",3,N],[13,"LessThanOrEquals",E,"`left <= right`",3,N],[13,"GreaterThan",E,"`left > right`",3,N],[13,"GreaterThanOrEquals",E,"`left >= right`",3,N],[13,"In",E,"`left IN (..)`",3,N],[13,"NotIn",E,"`left NOT IN (..)`",3,N],[13,"Like",E,"`left LIKE %..%`",3,N],[13,"NotLike",E,"`left NOT LIKE %..%`",3,N],[13,"BeginsWith",E,"`left LIKE ..%`",3,N],[13,"NotBeginsWith",E,"`left NOT LIKE ..%`",3,N],[13,"EndsInto",E,"`left LIKE %..`",3,N],[13,"NotEndsInto",E,"`left NOT LIKE %..`",3,N],[13,"Null",E,"`value IS NULL`",3,N],[13,"NotNull",E,"`value IS NOT NULL`",3,N],[13,"Between",E,"`value` BETWEEN `left` AND `right`",3,N],[13,"NotBetween",E,"`value` NOT BETWEEN `left` AND `right`",3,N],[4,R[1],E,"Tree structures and leaves for condition building.",N,N],[13,"And",E,"`(left_expression AND right_expression)`",4,N],[13,"Or",E,"`(left_expression OR right_expression)`",4,N],[13,"Not",E,"`(NOT expression)`",4,N],[13,"Single",E,"A single expression leaf",4,N],[13,"NoCondition",E,"A leaf that does nothing to the condition, `1=1`",4,N],[13,"NegativeCondition",E,"A leaf that cancels the condition, `1=0`",4,N],[4,R[77],E,"A database expression.",N,N],[13,R[1],E,"A tree of expressions to evaluate from the deepest value…",5,N],[13,R[2],E,R[24],5,N],[13,"Value",E,"A single value, column, row or a nested select",5,N],[4,R[78],E,"`INSERT` conflict resolution strategies.",N,N],[13,"DoNothing",E,"When a row already exists, do nothing.",6,N],[4,"Join",E,"A representation of a `JOIN` statement.",N,N],[13,"Inner",E,"Implements an `INNER JOIN` with given `JoinData`.",7,N],[13,"LeftOuter",E,"Implements an `LEFT OUTER JOIN` with given `JoinData`.",7,N],[4,"Order",E,"The ordering direction",N,N],[13,"Asc",E,"Ascending",8,N],[13,"Desc",E,"Descending",8,N],[4,"Query",E,"A database query",N,N],[13,R[3],E,"Query for fetching data. E.g. the `SELECT` query.",9,N],[13,R[4],E,E,9,N],[13,R[5],E,E,9,N],[13,R[6],E,E,9,N],[13,"Raw",E,E,9,N],[4,R[79],E,E,N,N],[13,"Table",E,E,10,N],[13,"Query",E,E,10,N],[4,R[80],E,"A value we can compare and use in database queries.",N,N],[13,"Parameterized",E,"Anything that we must parameterize before querying",11,N],[13,R[7],E,"A database column",11,N],[13,"Row",E,"Data in a row form, e.g. (1, 2, 3)",11,N],[13,R[3],E,"A nested `SELECT` statement",11,N],[13,R[8],E,"A database function call",11,N],[13,"Asterisk",E,"A qualified asterisk to a table",11,N],[4,R[81],E,"A value we must parameterize for the prepared statement.",N,N],[13,"Null",E,"A database null",12,N],[13,"Integer",E,"An integer value",12,N],[13,"Real",E,"A floating point value",12,N],[13,"Text",E,"A string value",12,N],[13,"Boolean",E,"A boolean value",12,N],[13,"Json",E,"A JSON value",12,N],[13,"Uuid",E,E,12,N],[13,"DateTime",E,E,12,N],[5,"count",E,"Count of the underlying table where the given expression…",N,[[[T]],["count"]]],[5,"row_number",E,"A number from 1 to n in specified order",N,[[],[R[60]]]],[5,R[16],E,"A quick alias to create an asterisk to a table.",N,[[],[R[17]]]],[11,"new",E,"Create a column definition.",0,[[["s"]],["self"]]],[11,"table",E,"Include the table name in the column expression.",0,[[["self"],[T]],["self"]]],[11,"opt_table",E,"Include the table name in the column expression, if table…",0,[[["self"],[R[57]]],["self"]]],[11,"alias",E,"Give the column an alias in the query.",0,[[["self"],["s"]],["self"]]],[11,"and",E,"An `AND` statement, is true when both sides are true.",4,[[["e"],["j"]],[R[9]]]],[11,"or",E,"An `OR` statement, is true when one side is true.",4,[[["e"],["j"]],[R[9]]]],[11,"not",E,"A `NOT` statement, is true when the expression is false.",4,[[["e"]],[R[9]]]],[11,"single",E,"A single leaf, is true when the expression is true.",4,[[["e"]],[R[9]]]],[11,"invert_if",E,"Inverts the entire condition tree if condition is met.",4,[[["self"],["bool"]],[R[9]]]],[11,R[12],E,"Creates a new `DELETE` statement for the given table.",13,[[[T]],["self"]]],[11,R[18],E,R[13],13,[[["self"],[T]],["self"]]],[11,R[11],E,E,14,[[["self"]],["bool"]]],[11,R[14],E,"Define the order of the row number. Is the row order if…",15,[[["self"],[T]],["self"]]],[11,"partition_by",E,"Define the partitioning of the row number",15,[[["self"],[T]],["self"]]],[11,"alias",E,"Give the function an alias in the query.",16,[[["self"],["s"]],["self"]]],[11,"single_into",E,"Creates a new single row `INSERT` statement for the given…",17,[[[T]],[R[10]]]],[11,"multi_into",E,"Creates a new multi row `INSERT` statement for the given…",17,[[[T],["vec"]],[R[71]]]],[11,"on_conflict",E,"Sets the conflict resolution strategy.",17,[[["self"],[R[63]]],["self"]]],[11,"returning",E,"Sets the returned columns. Works only with PostgreSQL.",17,[[["self"],["vec"]],["self"]]],[11,"value",E,"Adds a new value to the `INSERT` statement",18,[[["self"],["k"],["v"]],[R[10]]]],[11,"values",E,"Adds a new row to be inserted.",19,[[["self"],["v"]],["self"]]],[11,"new",E,E,1,[[["vec",[R[20]]]],["self"]]],[11,R[11],E,E,1,[[["self"]],["bool"]]],[11,"is_select",E,E,9,[[["self"]],["bool"]]],[11,"is_insert",E,E,9,[[["self"]],["bool"]]],[11,"is_update",E,E,9,[[["self"]],["bool"]]],[11,"is_delete",E,E,9,[[["self"]],["bool"]]],[11,"new",E,E,20,[[],["self"]]],[11,"push",E,E,20,[[["self"],[T]],["self"]]],[11,R[11],E,E,20,[[["self"]],["bool"]]],[11,R[12],E,"Creates a new `SELECT` statement for the given table.",21,[[[T]],["self"]]],[11,"value",E,"Selects a static value as the column.",21,[[["self"],[T]],["self"]]],[11,R[66],E,"Adds a column to be selected.",21,[[["self"],[T]],["self"]]],[11,"columns",E,"A bulk method to select multiple values.",21,[[["self"],["vec"]],["self"]]],[11,R[18],E,R[13],21,[[["self"],[T]],["self"]]],[11,"inner_join",E,"Adds `INNER JOIN` clause to the query.",21,[[["self"],["j"]],["self"]]],[11,"left_outer_join",E,"Adds `LEFT OUTER JOIN` clause to the query.",21,[[["self"],["j"]],["self"]]],[11,R[14],E,"Adds an ordering to the `ORDER BY` section.",21,[[["self"],[T]],["self"]]],[11,"limit",E,"Sets the `LIMIT` value.",21,[[["self"],["usize"]],["self"]]],[11,"offset",E,"Sets the `OFFSET` value.",21,[[["self"],["usize"]],["self"]]],[11,R[15],E,"Define in which database the table is located",2,[[["self"],[T]],["self"]]],[11,R[16],E,"A qualified asterisk to this table",2,[[["self"]],[R[17]]]],[11,"table",E,"Creates the basis for an `UPDATE` statement to the given…",22,[[[T]],["self"]]],[11,"set",E,"Add another column value assignment to the query",22,[[["self"],["k"],["v"]],[R[69]]]],[11,R[18],E,R[13],22,[[["self"],[T]],["self"]]],[6,R[93],E,E,N,N],[8,R[85],E,"An item that can be compared against other values in the…",N,N],[10,"equals",E,"Tests if both sides are the same value.",23,[[["self"],[T]],[R[19]]]],[10,R[36],E,"Tests if both sides are not the same value.",23,[[["self"],[T]],[R[19]]]],[10,R[37],E,"Tests if the left side is smaller than the right side.",23,[[["self"],[T]],[R[19]]]],[10,R[38],E,"Tests if the left side is smaller than the right side or…",23,[[["self"],[T]],[R[19]]]],[10,R[39],E,"Tests if the left side is bigger than the right side.",23,[[["self"],[T]],[R[19]]]],[10,R[40],E,"Tests if the left side is bigger than the right side or…",23,[[["self"],[T]],[R[19]]]],[10,R[41],E,"Tests if the left side is included in the right side…",23,[[["self"],[T]],[R[19]]]],[10,R[42],E,"Tests if the left side is not included in the right side…",23,[[["self"],[T]],[R[19]]]],[10,"like",E,"Tests if the left side includes the right side string.",23,[[["self"],[T]],[R[19]]]],[10,R[43],E,"Tests if the left side does not include the right side…",23,[[["self"],[T]],[R[19]]]],[10,R[44],E,"Tests if the left side starts with the right side string.",23,[[["self"],[T]],[R[19]]]],[10,R[45],E,"Tests if the left side doesn't start with the right side…",23,[[["self"],[T]],[R[19]]]],[10,R[46],E,"Tests if the left side ends into the right side string.",23,[[["self"],[T]],[R[19]]]],[10,R[47],E,"Tests if the left side does not end into the right side…",23,[[["self"],[T]],[R[19]]]],[10,R[50],E,"Tests if the left side is `NULL`.",23,[[["self"]],[R[19]]]],[10,R[48],E,"Tests if the left side is not `NULL`.",23,[[["self"]],[R[19]]]],[10,R[51],E,"Tests if the value is between two given values.",23,[[["self"],[T],["v"]],[R[19]]]],[10,R[49],E,"Tests if the value is not between two given values.",23,[[["self"],[T],["v"]],[R[19]]]],[8,R[86],E,"`AND`, `OR` and `NOT` conjuctive implementations.",N,N],[10,"and",E,"Builds an `AND` condition having `self` as the left leaf…",24,[[["self"],["e"]],[R[9]]]],[10,"or",E,"Builds an `OR` condition having `self` as the left leaf…",24,[[["self"],["e"]],[R[9]]]],[10,"not",E,"Builds a `NOT` condition having `self` as the condition.",24,[[["self"]],[R[9]]]],[8,R[87],E,"An item that can be joined.",N,N],[10,"on",E,"Add the `JOIN` conditions.",25,[[["self"],[T]],[R[23]]]],[8,R[88],E,"Convert the value into an order definition with order item…",N,N],[10,R[52],E,E,26,[[["self"]],[R[20]]]],[8,R[89],E,"An item that can be used in the `ORDER BY` statement",N,N],[10,"order",E,"Order by `self` in the given order",27,[[["self"],[R[57],["order"]]],[R[20]]]],[11,"ascend",E,R[74],27,[[["self"]],[R[20]]]],[11,"descend",E,R[75],27,[[["self"]],[R[20]]]],[8,R[90],E,"An object that can be aliased.",N,N],[10,"alias",E,"Alias table for usage elsewhere in the query.",28,[[["self"],[T]],["table"]]],[0,"visitor",R[0],"Visitors for reading an abstract SQL syntax tree,…",N,N],[3,"Sqlite",R[35],"A visitor for generating queries for an SQLite database.…",N,N],[3,R[92],E,E,N,N],[3,"Mysql",E,E,N,N],[8,"Visitor",E,"A function travelling through the query AST, building the…",N,N],[18,"C_BACKTICK",E,"Backtick character to surround identifiers, such as column…",29,N],[18,"C_WILDCARD",E,"Wildcard character to be used in `LIKE` queries.",29,N],[10,"build",E,"Convert the given `Query` to an SQL string and a vector of…",29,N],[10,R[55],E,"When called, the visitor decided to not render the…",29,[[["self"],[R[21]]]]],[10,R[56],E,"The `LIMIT` statement in the query",29,[[["self"],[R[57],[R[21]]]],[R[22]]]],[10,R[58],E,"The `OFFSET` statement in the query",29,[[["self"],[R[21]]],[R[22]]]],[10,R[53],E,"A walk through an `INSERT` statement",29,[[["self"],[R[62]]],[R[22]]]],[10,R[54],E,"What to use to substitute a parameter in the query.",29,[[["self"]],[R[22]]]],[11,"visit_parameterized",E,"A visit to a value we parameterize",29,[[["self"],[R[21]]],[R[22]]]],[11,"visit_joins",E,"The join statements in the query",29,[[["self"],["vec",["join"]]],[R[22]]]],[11,"visit_join_data",E,E,29,[[["self"],[R[23]]],[R[22]]]],[11,"visit_select",E,"A walk through a `SELECT` statement",29,[[["self"],[R[68]]],[R[22]]]],[11,"visit_update",E,"A walk through an `UPDATE` statement",29,[[["self"],[R[69]]],[R[22]]]],[11,"visit_delete",E,"A walk through an `DELETE` statement",29,[[["self"],[R[70]]],[R[22]]]],[11,"delimited_identifiers",E,"A helper for delimiting an identifier, surrounding every…",29,[[["vec",[R[22]]]],[R[22]]]],[11,"visit_query",E,"A walk through a complete `Query` statement",29,[[["self"],["query"]],[R[22]]]],[11,"visit_columns",E,"The selected columns",29,[[["self"],["vec",[R[17]]]],[R[22]]]],[11,"visit_database_value",E,"A visit to a value used in an expression",29,[[["self"],[R[17]]],[R[22]]]],[11,"visit_table",E,"A database table identifier",29,[[["self"],["table"],["bool"]],[R[22]]]],[11,"visit_column",E,"A database column identifier",29,[[["self"],[R[66]]],[R[22]]]],[11,"visit_row",E,"A row of data used as an expression",29,[[["self"],["row"]],[R[22]]]],[11,"visit_conditions",E,"A walk through the query conditions",29,[[["self"],[R[9]]],[R[22]]]],[11,"visit_expression",E,"An expression that can either be a single value, a set of…",29,[[["self"],[R[59]]],[R[22]]]],[11,"visit_compare",E,R[24],29,[[["self"],[R[19]]],[R[22]]]],[11,"visit_ordering",E,"A visit in the `ORDER BY` section of the query",29,[[["self"],[R[64]]],[R[22]]]],[11,"visit_function",E,E,29,[[["self"],[R[61]]],[R[22]]]],[11,"visit_partitioning",E,E,29,[[["self"],["over"]],[R[22]]]],[11,"from",R[25],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,N],[11,R[28],E,E,0,[[[U]],[R[31]]]],[11,R[33],E,E,0,[[["self"]],[T]]],[11,R[32],E,E,0,[[["self"]],[R[34]]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[30],E,E,0,[[["self"]],[R[31]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[26],E,E,13,[[["self"]],[T]]],[11,R[27],E,E,13,N],[11,R[28],E,E,13,[[[U]],[R[31]]]],[11,R[33],E,E,13,[[["self"]],[T]]],[11,R[32],E,E,13,[[["self"]],[R[34]]]],[11,R[29],E,E,13,[[["self"]],[T]]],[11,R[30],E,E,13,[[["self"]],[R[31]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[["self"]],[U]]],[11,R[26],E,E,30,[[["self"]],[T]]],[11,R[27],E,E,30,N],[11,R[28],E,E,30,[[[U]],[R[31]]]],[11,R[33],E,E,30,[[["self"]],[T]]],[11,R[32],E,E,30,[[["self"]],[R[34]]]],[11,R[29],E,E,30,[[["self"]],[T]]],[11,R[30],E,E,30,[[["self"]],[R[31]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[26],E,E,14,[[["self"]],[T]]],[11,R[27],E,E,14,N],[11,R[28],E,E,14,[[[U]],[R[31]]]],[11,R[33],E,E,14,[[["self"]],[T]]],[11,R[32],E,E,14,[[["self"]],[R[34]]]],[11,R[29],E,E,14,[[["self"]],[T]]],[11,R[30],E,E,14,[[["self"]],[R[31]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[26],E,E,15,[[["self"]],[T]]],[11,R[27],E,E,15,N],[11,R[28],E,E,15,[[[U]],[R[31]]]],[11,R[33],E,E,15,[[["self"]],[T]]],[11,R[32],E,E,15,[[["self"]],[R[34]]]],[11,R[29],E,E,15,[[["self"]],[T]]],[11,R[30],E,E,15,[[["self"]],[R[31]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[26],E,E,16,[[["self"]],[T]]],[11,R[27],E,E,16,N],[11,R[28],E,E,16,[[[U]],[R[31]]]],[11,R[33],E,E,16,[[["self"]],[T]]],[11,R[32],E,E,16,[[["self"]],[R[34]]]],[11,R[29],E,E,16,[[["self"]],[T]]],[11,R[30],E,E,16,[[["self"]],[R[31]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[26],E,E,17,[[["self"]],[T]]],[11,R[27],E,E,17,N],[11,R[28],E,E,17,[[[U]],[R[31]]]],[11,R[33],E,E,17,[[["self"]],[T]]],[11,R[32],E,E,17,[[["self"]],[R[34]]]],[11,R[29],E,E,17,[[["self"]],[T]]],[11,R[30],E,E,17,[[["self"]],[R[31]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[28],E,E,18,[[[U]],[R[31]]]],[11,R[33],E,E,18,[[["self"]],[T]]],[11,R[32],E,E,18,[[["self"]],[R[34]]]],[11,R[29],E,E,18,[[["self"]],[T]]],[11,R[30],E,E,18,[[["self"]],[R[31]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[28],E,E,19,[[[U]],[R[31]]]],[11,R[33],E,E,19,[[["self"]],[T]]],[11,R[32],E,E,19,[[["self"]],[R[34]]]],[11,R[29],E,E,19,[[["self"]],[T]]],[11,R[30],E,E,19,[[["self"]],[R[31]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,"into",E,E,31,[[["self"]],[U]]],[11,R[26],E,E,31,[[["self"]],[T]]],[11,R[27],E,E,31,N],[11,R[28],E,E,31,[[[U]],[R[31]]]],[11,R[33],E,E,31,[[["self"]],[T]]],[11,R[32],E,E,31,[[["self"]],[R[34]]]],[11,R[29],E,E,31,[[["self"]],[T]]],[11,R[30],E,E,31,[[["self"]],[R[31]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,N],[11,R[28],E,E,1,[[[U]],[R[31]]]],[11,R[33],E,E,1,[[["self"]],[T]]],[11,R[32],E,E,1,[[["self"]],[R[34]]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[30],E,E,1,[[["self"]],[R[31]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[26],E,E,20,[[["self"]],[T]]],[11,R[27],E,E,20,N],[11,R[28],E,E,20,[[[U]],[R[31]]]],[11,R[33],E,E,20,[[["self"]],[T]]],[11,R[32],E,E,20,[[["self"]],[R[34]]]],[11,R[29],E,E,20,[[["self"]],[T]]],[11,R[30],E,E,20,[[["self"]],[R[31]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[26],E,E,21,[[["self"]],[T]]],[11,R[27],E,E,21,N],[11,R[28],E,E,21,[[[U]],[R[31]]]],[11,R[33],E,E,21,[[["self"]],[T]]],[11,R[32],E,E,21,[[["self"]],[R[34]]]],[11,R[29],E,E,21,[[["self"]],[T]]],[11,R[30],E,E,21,[[["self"]],[R[31]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[27],E,E,2,N],[11,R[28],E,E,2,[[[U]],[R[31]]]],[11,R[33],E,E,2,[[["self"]],[T]]],[11,R[32],E,E,2,[[["self"]],[R[34]]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[30],E,E,2,[[["self"]],[R[31]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[26],E,E,22,[[["self"]],[T]]],[11,R[27],E,E,22,N],[11,R[28],E,E,22,[[[U]],[R[31]]]],[11,R[33],E,E,22,[[["self"]],[T]]],[11,R[32],E,E,22,[[["self"]],[R[34]]]],[11,R[29],E,E,22,[[["self"]],[T]]],[11,R[30],E,E,22,[[["self"]],[R[31]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,N],[11,R[28],E,E,3,[[[U]],[R[31]]]],[11,R[33],E,E,3,[[["self"]],[T]]],[11,R[32],E,E,3,[[["self"]],[R[34]]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[30],E,E,3,[[["self"]],[R[31]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[26],E,E,4,[[["self"]],[T]]],[11,R[27],E,E,4,N],[11,R[28],E,E,4,[[[U]],[R[31]]]],[11,R[33],E,E,4,[[["self"]],[T]]],[11,R[32],E,E,4,[[["self"]],[R[34]]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[30],E,E,4,[[["self"]],[R[31]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[26],E,E,5,[[["self"]],[T]]],[11,R[27],E,E,5,N],[11,R[28],E,E,5,[[[U]],[R[31]]]],[11,R[33],E,E,5,[[["self"]],[T]]],[11,R[32],E,E,5,[[["self"]],[R[34]]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[30],E,E,5,[[["self"]],[R[31]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[27],E,E,6,N],[11,R[28],E,E,6,[[[U]],[R[31]]]],[11,R[33],E,E,6,[[["self"]],[T]]],[11,R[32],E,E,6,[[["self"]],[R[34]]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[30],E,E,6,[[["self"]],[R[31]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[26],E,E,7,[[["self"]],[T]]],[11,R[27],E,E,7,N],[11,R[28],E,E,7,[[[U]],[R[31]]]],[11,R[33],E,E,7,[[["self"]],[T]]],[11,R[32],E,E,7,[[["self"]],[R[34]]]],[11,R[29],E,E,7,[[["self"]],[T]]],[11,R[30],E,E,7,[[["self"]],[R[31]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[26],E,E,8,[[["self"]],[T]]],[11,R[27],E,E,8,N],[11,R[28],E,E,8,[[[U]],[R[31]]]],[11,R[33],E,E,8,[[["self"]],[T]]],[11,R[32],E,E,8,[[["self"]],[R[34]]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[30],E,E,8,[[["self"]],[R[31]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[26],E,E,9,[[["self"]],[T]]],[11,R[27],E,E,9,N],[11,R[28],E,E,9,[[[U]],[R[31]]]],[11,R[33],E,E,9,[[["self"]],[T]]],[11,R[32],E,E,9,[[["self"]],[R[34]]]],[11,R[29],E,E,9,[[["self"]],[T]]],[11,R[30],E,E,9,[[["self"]],[R[31]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[26],E,E,10,[[["self"]],[T]]],[11,R[27],E,E,10,N],[11,R[28],E,E,10,[[[U]],[R[31]]]],[11,R[33],E,E,10,[[["self"]],[T]]],[11,R[32],E,E,10,[[["self"]],[R[34]]]],[11,R[29],E,E,10,[[["self"]],[T]]],[11,R[30],E,E,10,[[["self"]],[R[31]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[26],E,E,11,[[["self"]],[T]]],[11,R[27],E,E,11,N],[11,R[28],E,E,11,[[[U]],[R[31]]]],[11,R[33],E,E,11,[[["self"]],[T]]],[11,R[32],E,E,11,[[["self"]],[R[34]]]],[11,R[29],E,E,11,[[["self"]],[T]]],[11,R[30],E,E,11,[[["self"]],[R[31]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[26],E,E,12,[[["self"]],[T]]],[11,R[27],E,E,12,N],[11,R[28],E,E,12,[[[U]],[R[31]]]],[11,R[33],E,E,12,[[["self"]],[T]]],[11,R[32],E,E,12,[[["self"]],[R[34]]]],[11,R[29],E,E,12,[[["self"]],[T]]],[11,R[30],E,E,12,[[["self"]],[R[31]]]],[11,R[73],E,E,12,[[["self"]],["value"]]],[11,"from",R[35],E,32,[[[T]],[T]]],[11,"into",E,E,32,[[["self"]],[U]]],[11,R[28],E,E,32,[[[U]],[R[31]]]],[11,R[33],E,E,32,[[["self"]],[T]]],[11,R[32],E,E,32,[[["self"]],[R[34]]]],[11,R[29],E,E,32,[[["self"]],[T]]],[11,R[30],E,E,32,[[["self"]],[R[31]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[["self"]],[U]]],[11,R[28],E,E,33,[[[U]],[R[31]]]],[11,R[33],E,E,33,[[["self"]],[T]]],[11,R[32],E,E,33,[[["self"]],[R[34]]]],[11,R[29],E,E,33,[[["self"]],[T]]],[11,R[30],E,E,33,[[["self"]],[R[31]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,"into",E,E,34,[[["self"]],[U]]],[11,R[28],E,E,34,[[[U]],[R[31]]]],[11,R[33],E,E,34,[[["self"]],[T]]],[11,R[32],E,E,34,[[["self"]],[R[34]]]],[11,R[29],E,E,34,[[["self"]],[T]]],[11,R[30],E,E,34,[[["self"]],[R[31]]]],[11,"equals",R[25],E,20,[[["self"],[T]],[R[19]]]],[11,R[36],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[37],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[38],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[39],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[40],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[41],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[42],E,E,20,[[["self"],[T]],[R[19]]]],[11,"like",E,E,20,[[["self"],[T]],[R[19]]]],[11,R[43],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[44],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[45],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[46],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[47],E,E,20,[[["self"],[T]],[R[19]]]],[11,R[50],E,E,20,[[["self"]],[R[19]]]],[11,R[48],E,E,20,[[["self"]],[R[19]]]],[11,R[51],E,E,20,[[["self"],[T],["v"]],[R[19]]]],[11,R[49],E,E,20,[[["self"],[T],["v"]],[R[19]]]],[11,"equals",E,E,11,[[["self"],[T]],[R[19]]]],[11,R[36],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[37],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[38],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[39],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[40],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[41],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[42],E,E,11,[[["self"],[T]],[R[19]]]],[11,"like",E,E,11,[[["self"],[T]],[R[19]]]],[11,R[43],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[44],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[45],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[46],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[47],E,E,11,[[["self"],[T]],[R[19]]]],[11,R[50],E,E,11,[[["self"]],[R[19]]]],[11,R[48],E,E,11,[[["self"]],[R[19]]]],[11,R[51],E,E,11,[[["self"],[T],["v"]],[R[19]]]],[11,R[49],E,E,11,[[["self"],[T],["v"]],[R[19]]]],[11,"order",E,E,0,[[["self"],[R[57],["order"]]],[R[20]]]],[11,R[52],E,E,0,[[["self"]],[R[20]]]],[11,R[52],R[0],E,35,[[["self"]],[R[20]]]],[11,"alias",R[25],E,2,[[["self"],[T]],["self"]]],[11,"build",R[35],E,32,N],[11,R[53],E,E,32,[[["self"],[R[62]]],[R[22]]]],[11,R[54],E,E,32,[[["self"]],[R[22]]]],[11,R[55],E,E,32,[[["self"],[R[21]]]]],[11,R[56],E,E,32,[[["self"],[R[57],[R[21]]]],[R[22]]]],[11,R[58],E,E,32,[[["self"],[R[21]]],[R[22]]]],[11,"build",E,E,33,N],[11,R[55],E,E,33,[[["self"],[R[21]]]]],[11,R[54],E,E,33,[[["self"]],[R[22]]]],[11,R[56],E,E,33,[[["self"],[R[57],[R[21]]]],[R[22]]]],[11,R[58],E,E,33,[[["self"],[R[21]]],[R[22]]]],[11,R[53],E,E,33,[[["self"],[R[62]]],[R[22]]]],[11,"build",E,E,34,N],[11,R[53],E,E,34,[[["self"],[R[62]]],[R[22]]]],[11,R[54],E,E,34,[[["self"]],[R[22]]]],[11,R[55],E,E,34,[[["self"],[R[21]]]]],[11,R[56],E,E,34,[[["self"],[R[57],[R[21]]]],[R[22]]]],[11,R[58],E,E,34,[[["self"],[R[21]]],[R[22]]]],[11,"eq",R[25],E,0,[[["self"],[R[66]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[66]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[19]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[19]]],["bool"]]],[11,"eq",E,E,4,[[["self"],[R[9]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[9]]],["bool"]]],[11,"eq",E,E,13,[[["self"],[R[70]]],["bool"]]],[11,"ne",E,E,13,[[["self"],[R[70]]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[59]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[59]]],["bool"]]],[11,"eq",E,E,30,[[["self"],["count"]],["bool"]]],[11,"ne",E,E,30,[[["self"],["count"]],["bool"]]],[11,"eq",E,E,14,[[["self"],["over"]],["bool"]]],[11,"ne",E,E,14,[[["self"],["over"]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[60]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[60]]],["bool"]]],[11,"eq",E,E,16,[[["self"],[R[61]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[61]]],["bool"]]],[11,"eq",E,E,17,[[["self"],[R[62]]],["bool"]]],[11,"ne",E,E,17,[[["self"],[R[62]]],["bool"]]],[11,"eq",E,E,6,[[["self"],[R[63]]],["bool"]]],[11,"eq",E,E,31,[[["self"],[R[23]]],["bool"]]],[11,"ne",E,E,31,[[["self"],[R[23]]],["bool"]]],[11,"eq",E,E,7,[[["self"],["join"]],["bool"]]],[11,"ne",E,E,7,[[["self"],["join"]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[64]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[64]]],["bool"]]],[11,"eq",E,E,8,[[["self"],["order"]],["bool"]]],[11,"eq",E,E,9,[[["self"],["query"]],["bool"]]],[11,"ne",E,E,9,[[["self"],["query"]],["bool"]]],[11,"eq",E,E,20,[[["self"],["row"]],["bool"]]],[11,"ne",E,E,20,[[["self"],["row"]],["bool"]]],[11,"eq",E,E,21,[[["self"],[R[68]]],["bool"]]],[11,"ne",E,E,21,[[["self"],[R[68]]],["bool"]]],[11,"eq",E,E,10,[[["self"],[R[65]]],["bool"]]],[11,"ne",E,E,10,[[["self"],[R[65]]],["bool"]]],[11,"eq",E,E,2,[[["self"],["table"]],["bool"]]],[11,"ne",E,E,2,[[["self"],["table"]],["bool"]]],[11,"eq",E,E,22,[[["self"],[R[69]]],["bool"]]],[11,"ne",E,E,22,[[["self"],[R[69]]],["bool"]]],[11,"eq",E,E,12,[[["self"],[R[21]]],["bool"]]],[11,"ne",E,E,12,[[["self"],[R[21]]],["bool"]]],[11,"eq",E,E,11,[[["self"],[R[17]]],["bool"]]],[11,"ne",E,E,11,[[["self"],[R[17]]],["bool"]]],[11,R[67],E,E,0,[[],[R[66]]]],[11,R[67],E,E,4,[[],["self"]]],[11,R[67],E,E,14,[[],["over"]]],[11,R[67],E,E,15,[[],[R[60]]]],[11,R[67],E,E,1,[[],[R[64]]]],[11,R[67],E,E,20,[[],["row"]]],[11,R[67],E,E,21,[[],[R[68]]]],[11,"clone",E,E,0,[[["self"]],[R[66]]]],[11,"clone",E,E,3,[[["self"]],[R[19]]]],[11,"clone",E,E,4,[[["self"]],[R[9]]]],[11,"clone",E,E,13,[[["self"]],[R[70]]]],[11,"clone",E,E,5,[[["self"]],[R[59]]]],[11,"clone",E,E,30,[[["self"]],["count"]]],[11,"clone",E,E,14,[[["self"]],["over"]]],[11,"clone",E,E,15,[[["self"]],[R[60]]]],[11,"clone",E,E,16,[[["self"]],[R[61]]]],[11,"clone",E,E,17,[[["self"]],[R[62]]]],[11,"clone",E,E,6,[[["self"]],[R[63]]]],[11,"clone",E,E,31,[[["self"]],[R[23]]]],[11,"clone",E,E,7,[[["self"]],["join"]]],[11,"clone",E,E,1,[[["self"]],[R[64]]]],[11,"clone",E,E,8,[[["self"]],["order"]]],[11,"clone",E,E,9,[[["self"]],["query"]]],[11,"clone",E,E,20,[[["self"]],["row"]]],[11,"clone",E,E,21,[[["self"]],[R[68]]]],[11,"clone",E,E,10,[[["self"]],[R[65]]]],[11,"clone",E,E,2,[[["self"]],["table"]]],[11,"clone",E,E,22,[[["self"]],[R[69]]]],[11,"clone",E,E,12,[[["self"]],[R[21]]]],[11,"clone",E,E,11,[[["self"]],[R[17]]]],[11,"from",E,E,0,[[["str"]],[R[66]]]],[11,"from",E,E,0,[[[R[22]]],[R[66]]]],[11,"from",E,E,0,N],[11,"from",E,E,4,[[[R[68]]],[R[9]]]],[11,"from",E,E,9,[[[R[70]]],["query"]]],[11,"from",E,E,5,[[[R[68]]],[R[59]]]],[11,"from",E,E,16,[[[R[60]]],[R[61]]]],[11,"from",E,E,11,[[[R[60]]],[R[17]]]],[11,"from",E,E,16,[[["count"]],[R[61]]]],[11,"from",E,E,11,[[["count"]],[R[17]]]],[11,"from",E,E,9,[[[R[62]]],["query"]]],[11,"from",E,E,17,[[[R[10]]],[R[62]]]],[11,"from",E,E,17,[[[R[71]]],[R[62]]]],[11,"from",E,E,9,[[[R[10]]],["query"]]],[11,"from",E,E,9,[[[R[71]]],["query"]]],[11,"from",E,E,9,[[[T]],["query"]]],[11,"from",E,E,20,[[["vec"]],["row"]]],[11,"from",E,E,20,N],[11,"from",E,E,20,N],[11,"from",E,E,20,N],[11,"from",E,E,20,N],[11,"from",E,E,9,[[[R[68]]],["query"]]],[11,"from",E,E,2,[[["str"]],["table"]]],[11,"from",E,E,2,N],[11,"from",E,E,2,[[[R[22]]],["table"]]],[11,"from",E,E,2,N],[11,"from",E,E,2,[[[R[68]]],["table"]]],[11,"from",E,E,9,[[[R[69]]],["query"]]],[11,"from",E,E,12,[[["str"]],[R[21]]]],[11,"from",E,E,12,[[["usize"]],["self"]]],[11,"from",E,E,12,[[["i32"]],["self"]]],[11,"from",E,E,12,[[[R[22]]],["self"]]],[11,"from",E,E,12,[[["i64"]],["self"]]],[11,"from",E,E,12,[[["f64"]],["self"]]],[11,"from",E,E,12,[[["bool"]],["self"]]],[11,"from",E,E,12,[[["value"]],["self"]]],[11,"from",E,E,12,[[["uuid"]],["self"]]],[11,"from",E,E,12,[[["datetime",["utc"]]],["self"]]],[11,"from",E,E,11,[[["row"]],["self"]]],[11,"from",E,E,11,[[[R[61]]],["self"]]],[11,"from",E,E,11,[[[T]],[R[17]]]],[11,"from",E,E,11,[[["vec"]],[R[17]]]],[11,"into",E,E,0,[[["self"]],[R[17]]]],[11,"into",E,E,3,[[["self"]],[R[9]]]],[11,"into",E,E,3,[[["self"]],[R[59]]]],[11,"into",E,E,4,[[["self"]],[R[59]]]],[11,"into",E,E,21,[[["self"]],[R[17]]]],[11,"fmt",E,E,0,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,3,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,4,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,13,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,5,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,30,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,14,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,15,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,16,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,17,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,6,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,31,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,7,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,1,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,8,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,9,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,20,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,21,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,10,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,2,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,22,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,12,[[["self"],[R[72]]],[R[31]]]],[11,"fmt",E,E,11,[[["self"],[R[72]]],[R[31]]]],[11,"to_sql",E,E,12,[[["self"]],[R[31],["tosqloutput","rusqlerror"]]]],[11,"to_sql",E,E,12,[[["self"],["type"],["vec"]],[R[31],["isnull","box"]]]],[11,"accepts",E,E,12,[[["type"]],["bool"]]],[11,"to_sql_checked",E,E,12,[[["self"],["type"],["vec"]],[R[31],["isnull","box"]]]],[11,R[73],E,E,12,[[["self"]],["myvalue"]]],[11,"ascend",E,R[74],27,[[["self"]],[R[20]]]],[11,"descend",E,R[75],27,[[["self"]],[R[20]]]]],"p":[[3,R[7]],[3,R[76]],[3,"Table"],[4,R[2]],[4,R[1]],[4,R[77]],[4,R[78]],[4,"Join"],[4,"Order"],[4,"Query"],[4,R[79]],[4,R[80]],[4,R[81]],[3,R[6]],[3,"Over"],[3,R[82]],[3,R[8]],[3,R[4]],[3,R[83]],[3,R[84]],[3,"Row"],[3,R[3]],[3,R[5]],[8,R[85]],[8,R[86]],[8,R[87]],[8,R[88]],[8,R[89]],[8,R[90]],[8,"Visitor"],[3,"Count"],[3,R[91]],[3,"Sqlite"],[3,R[92]],[3,"Mysql"],[6,R[93]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);