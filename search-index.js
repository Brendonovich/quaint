var searchIndex={};
searchIndex["quaint"] = {"doc":"quaint","i":[[4,"Value","quaint","A value we must parameterize for the prepared statement.",null,null],[13,"Null","","",0,null],[13,"Integer","","",0,null],[13,"Real","","",0,null],[13,"Text","","",0,null],[13,"Enum","","",0,null],[13,"Bytes","","",0,null],[13,"Boolean","","",0,null],[13,"Char","","",0,null],[13,"Array","","",0,null],[13,"Json","","",0,null],[13,"Uuid","","",0,null],[13,"DateTime","","",0,null],[0,"ast","","An abstract syntax tree for SQL queries.",null,null],[3,"Column","quaint::ast","A column definition.",null,null],[12,"name","","",1,null],[3,"Delete","","A builder for a `DELETE` statement.",null,null],[3,"Expression","","",null,null],[3,"AggregateToString","","An aggregate function that concatenates strings from a…",null,null],[3,"Average","","",null,null],[3,"Count","","Returns the number of rows that matches a specified…",null,null],[3,"RowNumber","","A window function that assigns a sequential integer number…",null,null],[3,"Sum","","",null,null],[3,"Function","","A database function definition",null,null],[3,"Grouping","","A list of definitions for the `GROUP BY` statement",null,null],[12,"0","","",2,null],[3,"Insert","","A builder for an `INSERT` statement.",null,null],[3,"SingleRowInsert","","A builder for an `INSERT` statement for a single row.",null,null],[3,"MultiRowInsert","","A builder for an `INSERT` statement for multiple rows.",null,null],[3,"JoinData","","The `JOIN` table and conditions.",null,null],[3,"Ordering","","A list of definitions for the `ORDER BY` statement",null,null],[12,"0","","",3,null],[3,"Over","","Determines the partitioning and ordering of a rowset…",null,null],[3,"Row","","A collection of values surrounded by parentheses.",null,null],[12,"values","","",4,null],[3,"Select","","A builder for a `SELECT` statement.",null,null],[3,"Table","","A table definition",null,null],[12,"typ","","",5,null],[12,"alias","","",5,null],[12,"database","","",5,null],[3,"Union","","A builder for a `UNION`s over multiple `SELECT` statements.",null,null],[3,"Update","","A builder for an `UPDATE` statement.",null,null],[3,"Values","","An in-memory temporary table. Can be used in some of the…",null,null],[4,"Compare","","For modeling comparison expression",null,null],[13,"Equals","","`left = right`",6,null],[13,"NotEquals","","`left <> right`",6,null],[13,"LessThan","","`left < right`",6,null],[13,"LessThanOrEquals","","`left <= right`",6,null],[13,"GreaterThan","","`left > right`",6,null],[13,"GreaterThanOrEquals","","`left >= right`",6,null],[13,"In","","`left IN (..)`",6,null],[13,"NotIn","","`left NOT IN (..)`",6,null],[13,"Like","","`left LIKE %..%`",6,null],[13,"NotLike","","`left NOT LIKE %..%`",6,null],[13,"BeginsWith","","`left LIKE ..%`",6,null],[13,"NotBeginsWith","","`left NOT LIKE ..%`",6,null],[13,"EndsInto","","`left LIKE %..`",6,null],[13,"NotEndsInto","","`left NOT LIKE %..`",6,null],[13,"Null","","`value IS NULL`",6,null],[13,"NotNull","","`value IS NOT NULL`",6,null],[13,"Between","","`value` BETWEEN `left` AND `right`",6,null],[13,"NotBetween","","`value` NOT BETWEEN `left` AND `right`",6,null],[4,"ConditionTree","","Tree structures and leaves for condition building.",null,null],[13,"And","","`(left_expression AND right_expression)`",7,null],[13,"Or","","`(left_expression OR right_expression)`",7,null],[13,"Not","","`(NOT expression)`",7,null],[13,"Single","","A single expression leaf",7,null],[13,"NoCondition","","A leaf that does nothing to the condition, `1=1`",7,null],[13,"NegativeCondition","","A leaf that cancels the condition, `1=0`",7,null],[4,"ExpressionKind","","An expression we can compare and use in database queries.",null,null],[13,"Parameterized","","Anything that we must parameterize before querying",8,null],[13,"Column","","A database column",8,null],[13,"Row","","Data in a row form, e.g. (1, 2, 3)",8,null],[13,"Select","","A nested `SELECT` statement",8,null],[13,"Function","","A database function call",8,null],[13,"Asterisk","","A qualified asterisk to a table",8,null],[13,"Op","","An operation: sum, sub, mul or div.",8,null],[13,"Values","","A `VALUES` statement",8,null],[13,"ConditionTree","","A tree of expressions to evaluate from the deepest value…",8,null],[13,"Compare","","A comparison expression",8,null],[13,"Value","","A single value, column, row or a nested select",8,null],[4,"OnConflict","","`INSERT` conflict resolution strategies.",null,null],[13,"DoNothing","","When a row already exists, do nothing.",9,null],[4,"Join","","A representation of a `JOIN` statement.",null,null],[13,"Inner","","Implements an `INNER JOIN` with given `JoinData`.",10,null],[13,"Left","","Implements an `LEFT JOIN` with given `JoinData`.",10,null],[13,"Right","","Implements an `RIGHT JOIN` with given `JoinData`.",10,null],[13,"Full","","Implements an `FULL JOIN` with given `JoinData`.",10,null],[4,"SqlOp","","Calculation operations in SQL queries.",null,null],[13,"Add","","",11,null],[13,"Sub","","",11,null],[13,"Mul","","",11,null],[13,"Div","","",11,null],[13,"Rem","","",11,null],[4,"Order","","The ordering direction",null,null],[13,"Asc","","Ascending",12,null],[13,"Desc","","Descending",12,null],[4,"Query","","A database query",null,null],[13,"Select","","Query for fetching data. E.g. the `SELECT` query.",13,null],[13,"Insert","","",13,null],[13,"Update","","",13,null],[13,"Delete","","",13,null],[13,"Union","","",13,null],[13,"Raw","","",13,null],[4,"TableType","","Either an identifier or a nested query.",null,null],[13,"Table","","",14,null],[13,"Query","","",14,null],[13,"Values","","",14,null],[4,"Value","","A value we must parameterize for the prepared statement.",null,null],[13,"Null","","",0,null],[13,"Integer","","",0,null],[13,"Real","","",0,null],[13,"Text","","",0,null],[13,"Enum","","",0,null],[13,"Bytes","","",0,null],[13,"Boolean","","",0,null],[13,"Char","","",0,null],[13,"Array","","",0,null],[13,"Json","","",0,null],[13,"Uuid","","",0,null],[13,"DateTime","","",0,null],[5,"asterisk","","A quick alias to create an asterisk to a table.",null,[[],["expression"]]],[5,"aggregate_to_string","","Aggregates the given field into a string.",null,[[["t"]],["function"]]],[5,"avg","","Calculates the average value of a numeric column.",null,[[["c"]],["function"]]],[5,"count","","Count of the underlying table where the given expression…",null,[[["t"]],["function"]]],[5,"row_number","","A number from 1 to n in specified order",null,[[],["rownumber"]]],[5,"sum","","Calculates the sum value of a numeric column.",null,[[["c"]],["function"]]],[11,"new","","Create a column definition.",1,[[["s"]],["self"]]],[11,"table","","Include the table name in the column expression.",1,[[["t"]],["self"]]],[11,"opt_table","","Include the table name in the column expression, if table…",1,[[["option"]],["self"]]],[11,"and","","An `AND` statement, is true when both sides are true.",7,[[["e"]],["conditiontree"]]],[11,"or","","An `OR` statement, is true when one side is true.",7,[[["e"]],["conditiontree"]]],[11,"not","","A `NOT` statement, is true when the expression is false.",7,[[["e"]],["conditiontree"]]],[11,"single","","A single leaf, is true when the expression is true.",7,[[["e"]],["conditiontree"]]],[11,"invert_if","","Inverts the entire condition tree if condition is met.",7,[[["bool"]],["conditiontree"]]],[11,"from_table","","Creates a new `DELETE` statement for the given table.",15,[[["t"]],["self"]]],[11,"so_that","","Adds `WHERE` conditions to the query. See Comparable for…",15,[[["t"]],["self"]]],[11,"order_by","","Define the order of the row number. Is the row order if…",16,[[["t"]],["self"]]],[11,"partition_by","","Define the partitioning of the row number",16,[[["t"]],["self"]]],[11,"new","","",2,[[["vec",["groupbydefinition"]],["groupbydefinition"]],["self"]]],[11,"is_empty","","",2,[[["self"]],["bool"]]],[11,"single_into","","Creates a new single row `INSERT` statement for the given…",17,[[["t"]],["singlerowinsert"]]],[11,"multi_into","","Creates a new multi row `INSERT` statement for the given…",17,[[["i"],["t"]],["multirowinsert"]]],[11,"on_conflict","","Sets the conflict resolution strategy.",17,[[["onconflict"]],["self"]]],[11,"returning","","Sets the returned columns.",17,[[["i"]],["self"]]],[11,"value","","Adds a new value to the `INSERT` statement",18,[[["k"],["v"]],["singlerowinsert"]]],[11,"build","","Convert into a common `Insert` statement.",18,[[],["insert"]]],[11,"values","","Adds a new row to be inserted.",19,[[["v"]],["self"]]],[11,"build","","Convert into a common `Insert` statement.",19,[[],["insert"]]],[11,"new","","",3,[[["vec",["orderdefinition"]],["orderdefinition"]],["self"]]],[11,"is_empty","","",3,[[["self"]],["bool"]]],[11,"is_empty","","",20,[[["self"]],["bool"]]],[11,"is_select","","",13,[[["self"]],["bool"]]],[11,"is_insert","","",13,[[["self"]],["bool"]]],[11,"is_update","","",13,[[["self"]],["bool"]]],[11,"is_delete","","",13,[[["self"]],["bool"]]],[11,"is_union","","",13,[[["self"]],["bool"]]],[11,"new","","",4,[[],["self"]]],[11,"with_capacity","","",4,[[["usize"]],["self"]]],[11,"pop","","",4,[[["self"]],[["expression"],["option",["expression"]]]]],[11,"push","","",4,[[["self"],["t"]]]],[11,"is_empty","","",4,[[["self"]],["bool"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"from_table","","Creates a new `SELECT` statement for the given table.",21,[[["t"]],["self"]]],[11,"value","","Selects a static value as the column.",21,[[["t"]],["self"]]],[11,"column","","Adds a column to be selected.",21,[[["t"]],["self"]]],[11,"columns","","A bulk method to select multiple values.",21,[[["t"]],["self"]]],[11,"so_that","","Adds `WHERE` conditions to the query, replacing the…",21,[[["t"]],["self"]]],[11,"and_where","","Adds an additional `WHERE` condition to the query…",21,[[["t"]],["self"]]],[11,"or_where","","Adds an additional `WHERE` condition to the query…",21,[[["t"]],["self"]]],[11,"inner_join","","Adds `INNER JOIN` clause to the query.",21,[[["j"]],["self"]]],[11,"left_join","","Adds `LEFT JOIN` clause to the query.",21,[[["j"]],["self"]]],[11,"right_join","","Adds `RIGHT JOIN` clause to the query.",21,[[["j"]],["self"]]],[11,"full_join","","Adds `FULL JOIN` clause to the query.",21,[[["j"]],["self"]]],[11,"order_by","","Adds an ordering to the `ORDER BY` section.",21,[[["t"]],["self"]]],[11,"group_by","","Adds a grouping to the `GROUP BY` section.",21,[[["t"]],["self"]]],[11,"having","","Adds group conditions to a query. Should be combined…",21,[[["t"]],["self"]]],[11,"limit","","Sets the `LIMIT` value.",21,[[["usize"]],["self"]]],[11,"offset","","Sets the `OFFSET` value.",21,[[["usize"]],["self"]]],[11,"database","","Define in which database the table is located",5,[[["t"]],["self"]]],[11,"asterisk","","A qualified asterisk to this table",5,[[],["expression"]]],[11,"new","","",22,[[["select"]],["self"]]],[11,"all","","Creates a union with previous selection and the given…",22,[[["select"]],["self"]]],[11,"distinct","","Creates a union with previous selection and the given…",22,[[["select"]],["self"]]],[11,"table","","Creates the basis for an `UPDATE` statement to the given…",23,[[["t"]],["self"]]],[11,"set","","Add another column value assignment to the query",23,[[["k"],["v"]],["update"]]],[11,"so_that","","Adds `WHERE` conditions to the query. See Comparable for…",23,[[["t"]],["self"]]],[11,"is_null","quaint","`true` if the `Value` is null.",0,[[["self"]],["bool"]]],[11,"is_text","","`true` if the `Value` is text.",0,[[["self"]],["bool"]]],[11,"as_str","","Returns a &str if the value is text, otherwise `None`.",0,[[["self"]],[["str"],["option",["str"]]]]],[11,"as_char","","Returns a char if the value is a char, otherwise `None`.",0,[[["self"]],[["option",["char"]],["char"]]]],[11,"to_string","","Returns a cloned String if the value is text, otherwise…",0,[[["self"]],[["string"],["option",["string"]]]]],[11,"into_string","","Transforms the `Value` to a `String` if it's text,…",0,[[],[["string"],["option",["string"]]]]],[11,"is_bytes","","Returns whether this value is the `Bytes` variant.",0,[[["self"]],["bool"]]],[11,"as_bytes","","Returns a bytes slice if the value is text or a byte…",0,[[["self"]],["option"]]],[11,"to_bytes","","Returns a cloned `Vec<u8>` if the value is text or a byte…",0,[[["self"]],[["vec",["u8"]],["option",["vec"]]]]],[11,"is_integer","","`true` if the `Value` is an integer.",0,[[["self"]],["bool"]]],[11,"as_i64","","Returns an i64 if the value is an integer, otherwise `None`.",0,[[["self"]],[["option",["i64"]],["i64"]]]],[11,"is_real","","`true` if the `Value` is a real value.",0,[[["self"]],["bool"]]],[11,"as_f64","","Returns a f64 if the value is a real value and the…",0,[[["self"]],[["option",["f64"]],["f64"]]]],[11,"as_decimal","","Returns a decimal if the value is a real value, otherwise…",0,[[["self"]],[["option",["decimal"]],["decimal"]]]],[11,"is_bool","","`true` if the `Value` is a boolean value.",0,[[["self"]],["bool"]]],[11,"as_bool","","Returns a bool if the value is a boolean, otherwise `None`.",0,[[["self"]],[["option",["bool"]],["bool"]]]],[11,"is_uuid","","`true` if the `Value` is of UUID type.",0,[[["self"]],["bool"]]],[11,"as_uuid","","Returns an UUID if the value is of UUID type, otherwise…",0,[[["self"]],[["option",["uuid"]],["uuid"]]]],[11,"is_datetime","","`true` if the `Value` is a DateTime.",0,[[["self"]],["bool"]]],[11,"as_datetime","","Returns a DateTime if the value is a DateTime, otherwise…",0,[[["self"]],[["option",["datetime"]],["datetime",["utc"]]]]],[11,"is_json","","`true` if the `Value` is a JSON value.",0,[[["self"]],["bool"]]],[11,"as_json","","Returns a reference to a JSON Value if of Json type,…",0,[[["self"]],[["option",["value"]],["value"]]]],[11,"into_json","","Transforms to a JSON Value if of Json type, otherwise…",0,[[],[["value"],["option",["value"]]]]],[11,"into_vec","","Returns a Vec if the value is an array of T, otherwise…",0,[[],[["vec"],["option",["vec"]]]]],[11,"new","quaint::ast","Create a new in-memory set of values.",24,[[],["self"]]],[11,"with_capacity","","Create a new in-memory set of values with an allocated…",24,[[["usize"]],["self"]]],[11,"push","","Add value to the temporary table.",24,[[["self"],["t"]]]],[11,"len","","The number of rows in the in-memory table.",24,[[["self"]],["usize"]]],[11,"is_empty","","True if has no rows.",24,[[["self"]],["bool"]]],[11,"row_len","","",24,[[["self"]],["usize"]]],[11,"flatten_row","","",24,[[],[["option",["row"]],["row"]]]],[6,"GroupByDefinition","","",null,null],[6,"OrderDefinition","","",null,null],[8,"Comparable","","An item that can be compared against other values in the…",null,null],[10,"equals","","Tests if both sides are the same value.",25,[[["t"]],["compare"]]],[10,"not_equals","","Tests if both sides are not the same value.",25,[[["t"]],["compare"]]],[10,"less_than","","Tests if the left side is smaller than the right side.",25,[[["t"]],["compare"]]],[10,"less_than_or_equals","","Tests if the left side is smaller than the right side or…",25,[[["t"]],["compare"]]],[10,"greater_than","","Tests if the left side is bigger than the right side.",25,[[["t"]],["compare"]]],[10,"greater_than_or_equals","","Tests if the left side is bigger than the right side or…",25,[[["t"]],["compare"]]],[10,"in_selection","","Tests if the left side is included in the right side…",25,[[["t"]],["compare"]]],[10,"not_in_selection","","Tests if the left side is not included in the right side…",25,[[["t"]],["compare"]]],[10,"like","","Tests if the left side includes the right side string.",25,[[["t"]],["compare"]]],[10,"not_like","","Tests if the left side does not include the right side…",25,[[["t"]],["compare"]]],[10,"begins_with","","Tests if the left side starts with the right side string.",25,[[["t"]],["compare"]]],[10,"not_begins_with","","Tests if the left side doesn't start with the right side…",25,[[["t"]],["compare"]]],[10,"ends_into","","Tests if the left side ends into the right side string.",25,[[["t"]],["compare"]]],[10,"not_ends_into","","Tests if the left side does not end into the right side…",25,[[["t"]],["compare"]]],[10,"is_null","","Tests if the left side is `NULL`.",25,[[],["compare"]]],[10,"is_not_null","","Tests if the left side is not `NULL`.",25,[[],["compare"]]],[10,"between","","Tests if the value is between two given values.",25,[[["t"],["v"]],["compare"]]],[10,"not_between","","Tests if the value is not between two given values.",25,[[["t"],["v"]],["compare"]]],[8,"Conjunctive","","`AND`, `OR` and `NOT` conjunctive implementations.",null,null],[10,"and","","Builds an `AND` condition having `self` as the left leaf…",26,[[["e"]],["conditiontree"]]],[10,"or","","Builds an `OR` condition having `self` as the left leaf…",26,[[["e"]],["conditiontree"]]],[10,"not","","Builds a `NOT` condition having `self` as the condition.",26,[[],["conditiontree"]]],[8,"Groupable","","An item that can be used in the `GROUP BY` statement",null,null],[10,"group","","Group by `self`",27,[[],["groupbydefinition"]]],[8,"IntoGroupByDefinition","","Convert the value into a group by definition.",null,null],[10,"into_group_by_definition","","",28,[[],["groupbydefinition"]]],[8,"Joinable","","An item that can be joined.",null,null],[10,"on","","Add the `JOIN` conditions.",29,[[["t"]],["joindata"]]],[8,"IntoOrderDefinition","","Convert the value into an order definition with order item…",null,null],[10,"into_order_definition","","",30,[[],["orderdefinition"]]],[8,"Orderable","","An item that can be used in the `ORDER BY` statement",null,null],[10,"order","","Order by `self` in the given order",31,[[["option",["order"]],["order"]],["orderdefinition"]]],[11,"ascend","","Change the order to `ASC`",31,[[],["orderdefinition"]]],[11,"descend","","Change the order to `DESC`",31,[[],["orderdefinition"]]],[8,"Aliasable","","An object that can be aliased.",null,null],[16,"Target","","",32,null],[10,"alias","","Alias table for usage elsewhere in the query.",32,[[["t"]]]],[0,"connector","quaint","A set of abstractions for database connections.",null,null],[3,"Mysql","quaint::connector","A connector interface for the MySQL database.",null,null],[3,"MysqlUrl","","Wraps a connection url and exposes the parsing logic used…",null,null],[3,"PostgreSql","","A connector interface for the PostgreSQL database.",null,null],[3,"SslParams","","",null,null],[3,"PostgresUrl","","Wraps a connection url and exposes the parsing logic used…",null,null],[3,"Sqlite","","A connector interface for the SQLite database",null,null],[3,"SqliteParams","","",null,null],[12,"connection_limit","","",33,null],[12,"file_path","","This is not a `PathBuf` because we need to `ATTACH` the…",33,null],[12,"db_name","","",33,null],[12,"socket_timeout","","",33,null],[3,"ResultRow","","An owned version of a `Row` in a `ResultSet`. See…",null,null],[3,"ResultRowRef","","A reference to a `Row` in a `ResultSet`. The columns can…",null,null],[3,"ResultSet","","Encapsulates a set of results and their respective column…",null,null],[3,"ResultSetIterator","","Thin iterator for ResultSet rows. Might become lazy one day.",null,null],[3,"Transaction","","A representation of an SQL database transaction. If not…",null,null],[4,"SslAcceptMode","","",null,null],[13,"Strict","","",34,null],[13,"AcceptInvalidCerts","","",34,null],[4,"ConnectionInfo","","General information about a SQL connection.",null,null],[13,"Postgres","","A PostgreSQL connection URL.",35,null],[13,"Mysql","","A MySQL connection URL.",35,null],[13,"Sqlite","","A SQLite connection URL.",35,null],[12,"file_path","quaint::connector::ConnectionInfo","The filesystem path of the SQLite database.",36,null],[12,"db_name","","The name the database is bound to (with `ATTACH…",36,null],[4,"SqlFamily","quaint::connector","One of the supported SQL variants.",null,null],[13,"Postgres","","",37,null],[13,"Mysql","","",37,null],[13,"Sqlite","","",37,null],[11,"at","","Take a value from a certain position in the row, if having…",38,[[["self"],["usize"]],[["option",["value"]],["value"]]]],[11,"get","","Take a value with the given column name from the row.…",38,[[["str"],["self"]],[["option",["value"]],["value"]]]],[11,"as_ref","","Make a referring ResultRowRef.",38,[[["self"]],["resultrowref"]]],[11,"into_single","","",38,[[],[["result",["value"]],["value"]]]],[11,"at","","Take a value from a certain position in the row, if having…",39,[[["self"],["usize"]],[["option",["value"]],["value"]]]],[11,"get","","Take a value with the given column name from the row.",39,[[["str"],["self"]],[["option",["value"]],["value"]]]],[11,"new","","Creates a new instance, bound to the given column names…",40,[[["vec",["vec"]],["vec",["string"]],["vec",["value"]],["string"]],["self"]]],[11,"last_insert_id","","The last id inserted, if available. Only works on certain…",40,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"columns","","An iterator of column names.",40,[[["self"]],["vec"]]],[11,"len","","Returns the number of rows in the `ResultSet`.",40,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `ResultSet` contains no rows.",40,[[["self"]],["bool"]]],[11,"first","","Returns the first row of the `ResultSet`, or None if the…",40,[[["self"]],[["resultrowref"],["option",["resultrowref"]]]]],[11,"get","","Returns a reference to a row in a given position.",40,[[["self"],["usize"]],[["resultrowref"],["option",["resultrowref"]]]]],[11,"into_single","","Takes the first row if existing, otherwise returns error.",40,[[],[["result",["resultrow"]],["resultrow"]]]],[11,"commit","","Commit the changes to the database and consume the…",41,[[["self"]]]],[11,"rollback","","Rolls back the changes to the database.",41,[[["self"]]]],[11,"new","","Parse `Url` to `MysqlUrl`. Returns error for mistyped…",42,[[["url"]],[["result",["error"]],["error"]]]],[11,"url","","The bare `Url` to the database.",42,[[["self"]],["url"]]],[11,"username","","The percent-decoded database username.",42,[[["self"]],[["str"],["cow",["str"]]]]],[11,"password","","The percent-decoded database password.",42,[[["self"]],[["cow",["str"]],["option",["cow"]]]]],[11,"dbname","","Name of the database connected. Defaults to `mysql`.",42,[[["self"]],["str"]]],[11,"host","","The database host. If `socket` and `host` are not set,…",42,[[["self"]],["str"]]],[11,"socket","","If set, connected to the database through a Unix socket.",42,[[["self"]],["option"]]],[11,"port","","The database port, defaults to `3306`.",42,[[["self"]],["u16"]]],[11,"new","","Create a new MySQL connection using `OptsBuilder` from the…",43,[[["mysqlurl"]],["result"]]],[11,"new","","Parse `Url` to `PostgresUrl`. Returns error for mistyped…",44,[[["url"]],[["result",["error"]],["error"]]]],[11,"url","","The bare `Url` to the database.",44,[[["self"]],["url"]]],[11,"username","","The percent-decoded database username.",44,[[["self"]],[["str"],["cow",["str"]]]]],[11,"host","","The database host. Taken first from the `host` query…",44,[[["self"]],["str"]]],[11,"dbname","","Name of the database connected. Defaults to `postgres`.",44,[[["self"]],["str"]]],[11,"password","","The percent-decoded database password.",44,[[["self"]],[["str"],["cow",["str"]]]]],[11,"port","","The database port, defaults to `5432`.",44,[[["self"]],["u16"]]],[11,"schema","","The database schema, defaults to `public`.",44,[[["self"]],["str"]]],[11,"new","","Create a new connection to the database.",45,[[["postgresurl"]]]],[11,"new","","",46,[[["str"]],[["result",["sqlite"]],["sqlite"]]]],[11,"attach_database","","",46,[[["str"],["self"]]]],[11,"from_url","","Parse `ConnectionInfo` out from an SQL connection string.",35,[[["str"]],["result"]]],[11,"dbname","","The provided database name. This will be `None` on SQLite.",35,[[["self"]],[["str"],["option",["str"]]]]],[11,"schema_name","","This is what item names are prefixed with in queries.",35,[[["self"]],["str"]]],[11,"host","","The provided database host. This will be `\"localhost\"` on…",35,[[["self"]],["str"]]],[11,"username","","The provided database user name. This will be `None` on…",35,[[["self"]],[["cow",["str"]],["option",["cow"]]]]],[11,"file_path","","The database file for SQLite, otherwise `None`.",35,[[["self"]],[["str"],["option",["str"]]]]],[11,"sql_family","","The family of databases connected.",35,[[["self"]],["sqlfamily"]]],[11,"port","","The provided database port, if applicable.",35,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"database_location","","A string describing the database location, meant for error…",35,[[["self"]],["string"]]],[11,"as_str","","Get a string representation of the family.",37,[[],["str"]]],[11,"from_scheme","","Convert url scheme to an SqlFamily.",37,[[["str"]],["option"]]],[11,"scheme_is_supported","","Check if a family exists for the given scheme.",37,[[["str"]],["bool"]]],[11,"is_postgres","","",37,[[["self"]],["bool"]]],[11,"is_mysql","","",37,[[["self"]],["bool"]]],[11,"is_sqlite","","",37,[[["self"]],["bool"]]],[8,"ValueIndex","","",null,null],[8,"GetRow","","",null,null],[10,"get_result_row","","",47,[[["self"]],[["result",["vec"]],["vec",["value"]]]]],[8,"TakeRow","","",null,null],[10,"take_result_row","","",48,[[["self"]],[["result",["vec"]],["vec",["value"]]]]],[8,"ToColumnNames","","",null,null],[10,"to_column_names","","",49,[[["self"]],[["vec",["string"]],["string"]]]],[8,"Queryable","","Represents a connection or a transaction that can be…",null,null],[10,"query","","Execute the given query.",50,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[10,"query_raw","","Execute a query given as SQL, interpolating the given…",50,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[10,"execute","","Execute the given query, returning the number of affected…",50,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[10,"execute_raw","","Execute a query given as SQL, interpolating the given…",50,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[10,"raw_cmd","","Run a command in the database, for queries that can't be…",50,[[["self"],["str"]],[["box",["future"]],["pin",["box"]]]]],[10,"version","","Return the version of the underlying database, queried…",50,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"select","","Execute a `SELECT` query.",50,[[["select"],["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"insert","","Execute an `INSERT` query.",50,[[["self"],["insert"]],[["pin",["box"]],["box",["future"]]]]],[11,"update","","Execute an `UPDATE` query, returning the number of…",50,[[["self"],["update"]],[["pin",["box"]],["box",["future"]]]]],[11,"delete","","Execute a `DELETE` query, returning the number of affected…",50,[[["self"],["delete"]],[["box",["future"]],["pin",["box"]]]]],[11,"server_reset_query","","Execute an arbitrary function in the beginning of each…",50,[[["transaction"],["self"]],[["box",["future"]],["pin",["box"]]]]],[8,"TransactionCapable","","A thing that can start a new transaction.",null,null],[11,"start_transaction","","Starts a new transaction",51,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[0,"error","quaint","Error module",null,null],[3,"Error","quaint::error","The error types for database I/O, connection and query…",null,null],[4,"DatabaseConstraint","","",null,null],[13,"Fields","","",52,null],[13,"Index","","",52,null],[13,"ForeignKey","","",52,null],[4,"ErrorKind","","",null,null],[13,"QueryError","","",53,null],[13,"DatabaseDoesNotExist","","",53,null],[12,"db_name","quaint::error::ErrorKind","",54,null],[13,"DatabaseAccessDenied","quaint::error","",53,null],[12,"db_name","quaint::error::ErrorKind","",55,null],[13,"DatabaseAlreadyExists","quaint::error","",53,null],[12,"db_name","quaint::error::ErrorKind","",56,null],[13,"AuthenticationFailed","quaint::error","",53,null],[12,"user","quaint::error::ErrorKind","",57,null],[13,"NotFound","quaint::error","",53,null],[13,"UniqueConstraintViolation","","",53,null],[12,"constraint","quaint::error::ErrorKind","",58,null],[13,"NullConstraintViolation","quaint::error","",53,null],[12,"constraint","quaint::error::ErrorKind","",59,null],[13,"ForeignKeyConstraintViolation","quaint::error","",53,null],[12,"constraint","quaint::error::ErrorKind","",60,null],[13,"ConnectionError","quaint::error","",53,null],[13,"ColumnReadFailure","","",53,null],[13,"ResultIndexOutOfBounds","","",53,null],[13,"ColumnNotFound","","",53,null],[13,"ResultTypeMismatch","","",53,null],[13,"DatabaseUrlIsInvalid","","",53,null],[13,"ConversionError","","",53,null],[13,"LengthMismatch","","",53,null],[12,"column","quaint::error::ErrorKind","",61,null],[13,"InvalidConnectionArguments","quaint::error","",53,null],[13,"IoError","","",53,null],[13,"ConnectTimeout","","",53,null],[13,"Timeout","","",53,null],[13,"TlsError","","",53,null],[12,"message","quaint::error::ErrorKind","",62,null],[13,"ValueOutOfRange","quaint::error","",53,null],[12,"message","quaint::error::ErrorKind","",63,null],[13,"FromRowError","quaint::error","",53,null],[11,"original_code","","The error code sent by the database, if available.",64,[[["self"]],[["str"],["option",["str"]]]]],[11,"original_message","","The original error message sent by the database, if…",64,[[["self"]],[["str"],["option",["str"]]]]],[11,"kind","","A more specific error type for matching.",64,[[["self"]],["errorkind"]]],[0,"pooled","quaint","A connection pool to a SQL database.",null,null],[3,"PooledConnection","quaint::pooled","A connection from the pool. Implements Queryable.",null,null],[3,"Quaint","","The main entry point and an abstraction over database…",null,null],[3,"Builder","","A `Builder` to construct an instance of a [`Quaint`] pool.",null,null],[11,"connection_limit","","The maximum number of connections in the pool.",65,[[["self"],["usize"]]]],[11,"max_idle","","The maximum number of idle connections the pool can…",65,[[["self"],["u64"]]]],[11,"connect_timeout","","A timeout for acquiring a connection with the…",65,[[["duration"],["self"]]]],[11,"max_idle_lifetime","","A time how long an idling connection can be kept in the…",65,[[["duration"],["self"]]]],[11,"test_on_check_out","","Perform a health check before returning a connection from…",65,[[["self"],["bool"]]]],[11,"health_check_interval","","Sets the interval how often a connection health will be…",65,[[["duration"],["self"]]]],[11,"build","","Consume the builder and create a new instance of a pool.",65,[[],["quaint"]]],[11,"builder","","Creates a new builder for a Quaint connection pool with…",66,[[["str"]],[["result",["builder"]],["builder"]]]],[11,"capacity","","The number of connections in the pool.",66,[[["self"]]]],[11,"check_out","","Reserve a connection from the pool.",66,[[["self"]]]],[11,"connection_info","","Info about the connection and underlying database.",66,[[["self"]],["connectioninfo"]]],[0,"prelude","quaint","A \"prelude\" for users of the `quaint` crate.",null,null],[3,"ResultRow","quaint::prelude","An owned version of a `Row` in a `ResultSet`. See…",null,null],[3,"ResultSet","","Encapsulates a set of results and their respective column…",null,null],[3,"Transaction","","A representation of an SQL database transaction. If not…",null,null],[4,"ConnectionInfo","","General information about a SQL connection.",null,null],[13,"Postgres","","A PostgreSQL connection URL.",35,null],[13,"Mysql","","A MySQL connection URL.",35,null],[13,"Sqlite","","A SQLite connection URL.",35,null],[12,"file_path","quaint::prelude::ConnectionInfo","The filesystem path of the SQLite database.",36,null],[12,"db_name","","The name the database is bound to (with `ATTACH…",36,null],[4,"SqlFamily","quaint::prelude","One of the supported SQL variants.",null,null],[13,"Postgres","","",37,null],[13,"Mysql","","",37,null],[13,"Sqlite","","",37,null],[8,"Queryable","","Represents a connection or a transaction that can be…",null,null],[10,"query","","Execute the given query.",50,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[10,"query_raw","","Execute a query given as SQL, interpolating the given…",50,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[10,"execute","","Execute the given query, returning the number of affected…",50,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[10,"execute_raw","","Execute a query given as SQL, interpolating the given…",50,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[10,"raw_cmd","","Run a command in the database, for queries that can't be…",50,[[["self"],["str"]],[["box",["future"]],["pin",["box"]]]]],[10,"version","","Return the version of the underlying database, queried…",50,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"select","quaint::connector","Execute a `SELECT` query.",50,[[["select"],["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"insert","","Execute an `INSERT` query.",50,[[["self"],["insert"]],[["pin",["box"]],["box",["future"]]]]],[11,"update","","Execute an `UPDATE` query, returning the number of…",50,[[["self"],["update"]],[["pin",["box"]],["box",["future"]]]]],[11,"delete","","Execute a `DELETE` query, returning the number of affected…",50,[[["self"],["delete"]],[["box",["future"]],["pin",["box"]]]]],[11,"server_reset_query","","Execute an arbitrary function in the beginning of each…",50,[[["transaction"],["self"]],[["box",["future"]],["pin",["box"]]]]],[8,"TransactionCapable","quaint::prelude","A thing that can start a new transaction.",null,null],[11,"start_transaction","quaint::connector","Starts a new transaction",51,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[0,"serde","quaint","Convert results from the database into any type…",null,null],[3,"ValueDeserializer","quaint::serde","",null,null],[5,"from_rows","","Deserialize each row of a `ResultSet`.",null,[[["resultset"]],[["result",["vec"]],["vec"]]]],[5,"from_row","","Deserialize a row into any type implementing `Deserialize`.",null,[[["resultrow"]],[["result"],["deserializeowned"]]]],[11,"from_first","quaint::connector","Takes the first row and deserializes it.",40,[[],[["result"],["deserializeowned"]]]],[0,"single","quaint","A single connection abstraction to a SQL database.",null,null],[3,"Quaint","quaint::single","The main entry point and an abstraction over a database…",null,null],[11,"new","","Create a new connection to the database. The connection…",67,[[["str"]]]],[11,"connection_info","","Info about the connection and underlying database.",67,[[["self"]],["connectioninfo"]]],[0,"visitor","quaint","Visitors for reading an abstract SQL syntax tree,…",null,null],[3,"Mysql","quaint::visitor","A visitor to generate queries for the MySQL database.",null,null],[3,"Postgres","","A visitor to generate queries for the PostgreSQL database.",null,null],[3,"Sqlite","","A visitor to generate queries for the SQLite database.",null,null],[8,"Visitor","","A function travelling through the query AST, building the…",null,null],[18,"C_BACKTICK","","Backtick character to surround identifiers, such as column…",68,null],[18,"C_WILDCARD","","Wildcard character to be used in `LIKE` queries.",68,null],[10,"build","","Convert the given `Query` to an SQL string and a vector of…",68,[[["q"]]]],[10,"write","","Write to the query.",68,[[["self"],["display"]],["result"]]],[11,"surround_with","","",68,[[["str"],["self"],["f"]],["result"]]],[10,"add_parameter","","When called, the visitor decided to not render the…",68,[[["self"],["value"]]]],[10,"visit_limit_and_offset","","The `LIMIT` and `OFFSET` statement in the query",68,[[["value"],["self"],["option",["value"]]],["result"]]],[10,"visit_insert","","A walk through an `INSERT` statement",68,[[["self"],["insert"]],["result"]]],[10,"parameter_substitution","","What to use to substitute a parameter in the query.",68,[[["self"]],["result"]]],[10,"visit_aggregate_to_string","","What to use to substitute a parameter in the query.",68,[[["self"],["expression"]],["result"]]],[11,"visit_parameterized","","A visit to a value we parameterize",68,[[["self"],["value"]],["result"]]],[11,"visit_joins","","The join statements in the query",68,[[["vec",["join"]],["self"],["join"]],["result"]]],[11,"visit_join_data","","",68,[[["self"],["joindata"]],["result"]]],[11,"visit_select","","A walk through a `SELECT` statement",68,[[["self"],["select"]],["result"]]],[11,"visit_update","","A walk through an `UPDATE` statement",68,[[["self"],["update"]],["result"]]],[11,"visit_delete","","A walk through an `DELETE` statement",68,[[["delete"],["self"]],["result"]]],[11,"delimited_identifiers","","A helper for delimiting an identifier, surrounding every…",68,[[["self"]],["result"]]],[11,"visit_query","","A walk through a complete `Query` statement",68,[[["self"],["query"]]]],[11,"visit_union","","A walk through a union of `SELECT` statements",68,[[["self"],["union"]],["result"]]],[11,"visit_columns","","The selected columns",68,[[["vec",["expression"]],["self"],["expression"]],["result"]]],[11,"visit_operation","","",68,[[["self"],["sqlop"]],["result"]]],[11,"visit_expression","","A visit to a value used in an expression",68,[[["self"],["expression"]],["result"]]],[11,"visit_values","","",68,[[["self"],["values"]],["result"]]],[11,"visit_table","","A database table identifier",68,[[["self"],["table"],["bool"]],["result"]]],[11,"visit_column","","A database column identifier",68,[[["self"],["column"]],["result"]]],[11,"visit_row","","A row of data used as an expression",68,[[["self"],["row"]],["result"]]],[11,"visit_conditions","","A walk through the query conditions",68,[[["self"],["conditiontree"]],["result"]]],[11,"visit_compare","","A comparison expression",68,[[["self"],["compare"]],["result"]]],[11,"visit_condition_equals","","",68,[[["self"],["expression"]],["result"]]],[11,"visit_condition_not_equals","","",68,[[["self"],["expression"]],["result"]]],[11,"visit_ordering","","A visit in the `ORDER BY` section of the query",68,[[["ordering"],["self"]],["result"]]],[11,"visit_grouping","","A visit in the `GROUP BY` section of the query",68,[[["grouping"],["self"]],["result"]]],[11,"visit_function","","",68,[[["self"],["function"]],["result"]]],[11,"visit_partitioning","","",68,[[["self"],["over"]],["result"]]],[6,"Result","quaint","",null,null],[14,"col","","Marks a given string or a tuple as a column. Useful when…",null,null],[14,"val","","Marks a given string as a value. Useful when using a value…",null,null],[14,"values","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"to_value","","",0,[[["self"]],["value"]]],[11,"from","quaint::ast","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"vzip","","",69,[[],["v"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"vzip","","",70,[[],["v"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"vzip","","",71,[[],["v"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"vzip","","",72,[[],["v"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"vzip","","",73,[[],["v"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"vzip","","",74,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"vzip","","",18,[[],["v"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"vzip","","",75,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"vzip","","",23,[[],["v"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"into_iter","","",24,[[],["i"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"vzip","","",14,[[],["v"]]],[11,"from","quaint::connector","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"vzip","","",43,[[],["v"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"vzip","","",42,[[],["v"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"vzip","","",45,[[],["v"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"vzip","","",76,[[],["v"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"vzip","","",44,[[],["v"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"vzip","","",46,[[],["v"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"vzip","","",33,[[],["v"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"into_iter","","",38,[[],["i"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"vzip","","",38,[[],["v"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"vzip","","",39,[[],["v"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"into_iter","","",40,[[],["i"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"vzip","","",40,[[],["v"]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"into_iter","","",77,[[],["i"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"vzip","","",77,[[],["v"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"vzip","","",41,[[],["v"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"vzip","","",34,[[],["v"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"vzip","","",35,[[],["v"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"vzip","","",37,[[],["v"]]],[11,"from","quaint::error","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"vzip","","",64,[[],["v"]]],[11,"as_fail","","",64,[[["self"]],["fail"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_string","","",52,[[["self"]],["string"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"vzip","","",52,[[],["v"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"to_string","","",53,[[["self"]],["string"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"vzip","","",53,[[],["v"]]],[11,"as_fail","","",53,[[["self"]],["fail"]]],[11,"from","quaint::pooled","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"vzip","","",78,[[],["v"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"vzip","","",66,[[],["v"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"vzip","","",65,[[],["v"]]],[11,"from","quaint::serde","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"vzip","","",79,[[],["v"]]],[11,"from","quaint::single","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"vzip","","",67,[[],["v"]]],[11,"from","quaint::visitor","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"vzip","","",80,[[],["v"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"vzip","","",81,[[],["v"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"vzip","","",82,[[],["v"]]],[11,"equals","quaint::ast","",69,[[["t"]],["compare"]]],[11,"not_equals","","",69,[[["t"]],["compare"]]],[11,"less_than","","",69,[[["t"]],["compare"]]],[11,"less_than_or_equals","","",69,[[["t"]],["compare"]]],[11,"greater_than","","",69,[[["t"]],["compare"]]],[11,"greater_than_or_equals","","",69,[[["t"]],["compare"]]],[11,"in_selection","","",69,[[["t"]],["compare"]]],[11,"not_in_selection","","",69,[[["t"]],["compare"]]],[11,"like","","",69,[[["t"]],["compare"]]],[11,"not_like","","",69,[[["t"]],["compare"]]],[11,"begins_with","","",69,[[["t"]],["compare"]]],[11,"not_begins_with","","",69,[[["t"]],["compare"]]],[11,"ends_into","","",69,[[["t"]],["compare"]]],[11,"not_ends_into","","",69,[[["t"]],["compare"]]],[11,"is_null","","",69,[[],["compare"]]],[11,"is_not_null","","",69,[[],["compare"]]],[11,"between","","",69,[[["t"],["v"]],["compare"]]],[11,"not_between","","",69,[[["t"],["v"]],["compare"]]],[11,"equals","","",4,[[["t"]],["compare"]]],[11,"not_equals","","",4,[[["t"]],["compare"]]],[11,"less_than","","",4,[[["t"]],["compare"]]],[11,"less_than_or_equals","","",4,[[["t"]],["compare"]]],[11,"greater_than","","",4,[[["t"]],["compare"]]],[11,"greater_than_or_equals","","",4,[[["t"]],["compare"]]],[11,"in_selection","","",4,[[["t"]],["compare"]]],[11,"not_in_selection","","",4,[[["t"]],["compare"]]],[11,"like","","",4,[[["t"]],["compare"]]],[11,"not_like","","",4,[[["t"]],["compare"]]],[11,"begins_with","","",4,[[["t"]],["compare"]]],[11,"not_begins_with","","",4,[[["t"]],["compare"]]],[11,"ends_into","","",4,[[["t"]],["compare"]]],[11,"not_ends_into","","",4,[[["t"]],["compare"]]],[11,"is_null","","",4,[[],["compare"]]],[11,"is_not_null","","",4,[[],["compare"]]],[11,"between","","",4,[[["t"],["v"]],["compare"]]],[11,"not_between","","",4,[[["t"],["v"]],["compare"]]],[11,"group","","",1,[[],["groupbydefinition"]]],[11,"into_group_by_definition","","",1,[[],["groupbydefinition"]]],[11,"into_group_by_definition","quaint","",83,[[],["groupbydefinition"]]],[11,"order","quaint::ast","",1,[[["option",["order"]],["order"]],["orderdefinition"]]],[11,"into_order_definition","","",1,[[],["orderdefinition"]]],[11,"into_order_definition","quaint","",84,[[],["orderdefinition"]]],[11,"alias","quaint::ast","",1,[[["t"]]]],[11,"alias","","",69,[[["t"]]]],[11,"alias","","",74,[[["t"]]]],[11,"alias","","",5,[[["t"]]]],[11,"build","quaint::visitor","",80,[[["q"]]]],[11,"write","","",80,[[["self"],["display"]],["result"]]],[11,"visit_insert","","",80,[[["self"],["insert"]],["result"]]],[11,"parameter_substitution","","",80,[[["self"]],["result"]]],[11,"add_parameter","","",80,[[["self"],["value"]]]],[11,"visit_limit_and_offset","","",80,[[["value"],["self"],["option",["value"]]],["result"]]],[11,"visit_aggregate_to_string","","",80,[[["self"],["expression"]],["result"]]],[11,"visit_condition_equals","","",80,[[["self"],["expression"]],["result"]]],[11,"visit_condition_not_equals","","",80,[[["self"],["expression"]],["result"]]],[11,"build","","",81,[[["q"]]]],[11,"write","","",81,[[["self"],["display"]],["result"]]],[11,"add_parameter","","",81,[[["self"],["value"]]]],[11,"parameter_substitution","","",81,[[["self"]],["result"]]],[11,"visit_limit_and_offset","","",81,[[["value"],["self"],["option",["value"]]],["result"]]],[11,"visit_insert","","",81,[[["self"],["insert"]],["result"]]],[11,"visit_aggregate_to_string","","",81,[[["self"],["expression"]],["result"]]],[11,"visit_condition_equals","","",81,[[["self"],["expression"]],["result"]]],[11,"visit_condition_not_equals","","",81,[[["self"],["expression"]],["result"]]],[11,"build","","",82,[[["q"]]]],[11,"write","","",82,[[["self"],["display"]],["result"]]],[11,"visit_insert","","",82,[[["self"],["insert"]],["result"]]],[11,"parameter_substitution","","",82,[[["self"]],["result"]]],[11,"add_parameter","","",82,[[["self"],["value"]]]],[11,"visit_limit_and_offset","","",82,[[["value"],["self"],["option",["value"]]],["result"]]],[11,"visit_aggregate_to_string","","",82,[[["self"],["expression"]],["result"]]],[11,"visit_values","","",82,[[["self"],["values"]],["result"]]],[11,"query","quaint::connector","",41,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute","","",41,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"query_raw","","",41,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute_raw","","",41,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"raw_cmd","","",41,[[["self"],["str"]],[["box",["future"]],["pin",["box"]]]]],[11,"version","","",41,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"query","","",43,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute","","",43,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"query_raw","","",43,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute_raw","","",43,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"raw_cmd","","",43,[[["self"],["str"]],[["box",["future"]],["pin",["box"]]]]],[11,"version","","",43,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"query","","",45,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute","","",45,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"query_raw","","",45,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute_raw","","",45,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"raw_cmd","","",45,[[["self"],["str"]],[["box",["future"]],["pin",["box"]]]]],[11,"version","","",45,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"server_reset_query","","",45,[[["transaction"],["self"]],[["box",["future"]],["pin",["box"]]]]],[11,"query","","",46,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute","","",46,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"query_raw","","",46,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute_raw","","",46,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"raw_cmd","","",46,[[["self"],["str"]],[["box",["future"]],["pin",["box"]]]]],[11,"version","","",46,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"query","quaint::pooled","",78,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute","","",78,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"query_raw","","",78,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute_raw","","",78,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"raw_cmd","","",78,[[["self"],["str"]],[["box",["future"]],["pin",["box"]]]]],[11,"version","","",78,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"server_reset_query","","",78,[[["transaction"],["self"]],[["box",["future"]],["pin",["box"]]]]],[11,"query","quaint::single","",67,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute","","",67,[[["self"],["query"]],[["pin",["box"]],["box",["future"]]]]],[11,"query_raw","","",67,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"execute_raw","","",67,[[["self"],["str"]],[["pin",["box"]],["box",["future"]]]]],[11,"raw_cmd","","",67,[[["self"],["str"]],[["box",["future"]],["pin",["box"]]]]],[11,"version","","",67,[[["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"from","quaint::ast","",69,[[["column"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["str"]],["self"]]],[11,"from","","",1,[[["string"]],["self"]]],[11,"from","","",1,[[],["column"]]],[11,"from","","",7,[[["compare"]],["self"]]],[11,"from","","",69,[[["compare"]],["self"]]],[11,"from","","",69,[[["conditiontree"]],["self"]]],[11,"from","","",7,[[["select"]],["self"]]],[11,"from","","",13,[[["delete"]],["self"]]],[11,"from","","",69,[[["row"]],["self"]]],[11,"from","","",69,[[["function"]],["self"]]],[11,"from","","",69,[[["values"]],["self"]]],[11,"from","","",69,[[["sqlop"]],["self"]]],[11,"from","","",69,[[["t"]],["self"]]],[11,"from","","",69,[[["vec"]],["self"]]],[11,"from","","",74,[[["rownumber"]],["self"]]],[11,"from","","",69,[[["rownumber"]],["self"]]],[11,"from","","",74,[[["count"]],["self"]]],[11,"from","","",69,[[["count"]],["self"]]],[11,"from","","",74,[[["aggregatetostring"]],["self"]]],[11,"from","","",69,[[["aggregatetostring"]],["self"]]],[11,"from","","",74,[[["average"]],["self"]]],[11,"from","","",69,[[["average"]],["self"]]],[11,"from","","",74,[[["sum"]],["self"]]],[11,"from","","",69,[[["sum"]],["self"]]],[11,"from","","",13,[[["insert"]],["self"]]],[11,"from","","",17,[[["singlerowinsert"]],["self"]]],[11,"from","","",17,[[["multirowinsert"]],["self"]]],[11,"from","","",13,[[["singlerowinsert"]],["query"]]],[11,"from","","",13,[[["multirowinsert"]],["query"]]],[11,"from","","",13,[[["t"]],["self"]]],[11,"from","","",4,[[["vec"]],["row"]]],[11,"from","","",4,[[],["self"]]],[11,"from","","",4,[[],["self"]]],[11,"from","","",4,[[],["self"]]],[11,"from","","",4,[[],["self"]]],[11,"from","","",4,[[],["self"]]],[11,"from","","",69,[[["select"]],["expression"]]],[11,"from","","",13,[[["select"]],["query"]]],[11,"from","","",5,[[["str"]],["table"]]],[11,"from","","",5,[[],["table"]]],[11,"from","","",5,[[["string"]],["self"]]],[11,"from","","",5,[[["vec",["row"]],["row"]],["self"]]],[11,"from","","",5,[[["values"]],["self"]]],[11,"from","","",5,[[],["table"]]],[11,"from","","",5,[[["select"]],["self"]]],[11,"from","","",13,[[["union"]],["self"]]],[11,"from","","",13,[[["update"]],["self"]]],[11,"from","quaint","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[],["value"]]],[11,"from","","",0,[[["option"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["bool"]],["self"]]],[11,"from","","",0,[[["decimal"]],["self"]]],[11,"from","","",0,[[["jsonvalue"]],["self"]]],[11,"from","","",0,[[["uuid"]],["self"]]],[11,"from","","",0,[[["datetime",["utc"]],["utc"]],["self"]]],[11,"from","","",0,[[["naivetime"]],["self"]]],[11,"from","","",0,[[["f64"]],["self"]]],[11,"from","","",0,[[["f32"]],["self"]]],[11,"from","quaint::ast","",24,[[["i"]],["self"]]],[11,"from","quaint::error","",64,[[["error"]],["error"]]],[11,"from","","",64,[[["error"]],["error"]]],[11,"from","","",64,[[["error"]],["error"]]],[11,"from","","",64,[[["error"]],["error"]]],[11,"from","","",64,[[["error"]],["error"]]],[11,"from","","",64,[[["fromsqlerror"]],["error"]]],[11,"from","","",53,[[["error"]],["self"]]],[11,"from","","",64,[[["tryfrominterror"]],["self"]]],[11,"from","","",64,[[["error",["error"]],["error"]],["self"]]],[11,"from","","",64,[[["elapsed"]],["self"]]],[11,"from","","",64,[[["parseerror"]],["error"]]],[11,"from","","",64,[[["error"]],["error"]]],[11,"from","","",64,[[["fromutf8error"]],["error"]]],[11,"into_iter","quaint::ast","",24,[[]]],[11,"into_iter","quaint::connector","",38,[[]]],[11,"into_iter","","",40,[[]]],[11,"next","","",77,[[["self"]],["option"]]],[11,"clone","quaint::ast","",1,[[["self"]],["column"]]],[11,"clone","","",6,[[["self"]],["compare"]]],[11,"clone","","",7,[[["self"]],["conditiontree"]]],[11,"clone","","",15,[[["self"]],["delete"]]],[11,"clone","","",69,[[["self"]],["expression"]]],[11,"clone","","",8,[[["self"]],["expressionkind"]]],[11,"clone","","",70,[[["self"]],["aggregatetostring"]]],[11,"clone","","",71,[[["self"]],["average"]]],[11,"clone","","",72,[[["self"]],["count"]]],[11,"clone","","",16,[[["self"]],["rownumber"]]],[11,"clone","","",73,[[["self"]],["sum"]]],[11,"clone","","",74,[[["self"]],["function"]]],[11,"clone","","",2,[[["self"]],["grouping"]]],[11,"clone","","",17,[[["self"]],["insert"]]],[11,"clone","","",9,[[["self"]],["onconflict"]]],[11,"clone","","",75,[[["self"]],["joindata"]]],[11,"clone","","",10,[[["self"]],["join"]]],[11,"clone","","",11,[[["self"]],["sqlop"]]],[11,"clone","","",3,[[["self"]],["ordering"]]],[11,"clone","","",12,[[["self"]],["order"]]],[11,"clone","","",20,[[["self"]],["over"]]],[11,"clone","","",13,[[["self"]],["query"]]],[11,"clone","","",4,[[["self"]],["row"]]],[11,"clone","","",21,[[["self"]],["select"]]],[11,"clone","","",14,[[["self"]],["tabletype"]]],[11,"clone","","",5,[[["self"]],["table"]]],[11,"clone","","",22,[[["self"]],["union"]]],[11,"clone","","",23,[[["self"]],["update"]]],[11,"clone","quaint","",0,[[["self"]],["value"]]],[11,"clone","quaint::ast","",24,[[["self"]],["values"]]],[11,"clone","quaint::connector","",42,[[["self"]],["mysqlurl"]]],[11,"clone","","",34,[[["self"]],["sslacceptmode"]]],[11,"clone","","",76,[[["self"]],["sslparams"]]],[11,"clone","","",44,[[["self"]],["postgresurl"]]],[11,"clone","","",35,[[["self"]],["connectioninfo"]]],[11,"clone","","",37,[[["self"]],["sqlfamily"]]],[11,"clone","quaint::pooled","",66,[[["self"]],["quaint"]]],[11,"clone","quaint::single","",67,[[["self"]],["quaint"]]],[11,"default","quaint::ast","",1,[[],["column"]]],[11,"default","","",7,[[],["self"]]],[11,"default","","",16,[[],["rownumber"]]],[11,"default","","",2,[[],["grouping"]]],[11,"default","","",3,[[],["ordering"]]],[11,"default","","",20,[[],["over"]]],[11,"default","","",4,[[],["row"]]],[11,"default","","",21,[[],["select"]]],[11,"default","","",22,[[],["union"]]],[11,"default","","",24,[[],["values"]]],[11,"default","quaint::connector","",40,[[],["resultset"]]],[11,"eq","quaint::ast","",1,[[["column"],["self"]],["bool"]]],[11,"ne","","",1,[[["column"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["compare"]],["bool"]]],[11,"ne","","",6,[[["self"],["compare"]],["bool"]]],[11,"eq","","",7,[[["self"],["conditiontree"]],["bool"]]],[11,"ne","","",7,[[["self"],["conditiontree"]],["bool"]]],[11,"eq","","",15,[[["self"],["delete"]],["bool"]]],[11,"ne","","",15,[[["self"],["delete"]],["bool"]]],[11,"eq","","",69,[[["self"],["expression"]],["bool"]]],[11,"ne","","",69,[[["self"],["expression"]],["bool"]]],[11,"eq","","",8,[[["self"],["expressionkind"]],["bool"]]],[11,"ne","","",8,[[["self"],["expressionkind"]],["bool"]]],[11,"eq","","",70,[[["aggregatetostring"],["self"]],["bool"]]],[11,"ne","","",70,[[["aggregatetostring"],["self"]],["bool"]]],[11,"eq","","",71,[[["self"],["average"]],["bool"]]],[11,"ne","","",71,[[["self"],["average"]],["bool"]]],[11,"eq","","",72,[[["count"],["self"]],["bool"]]],[11,"ne","","",72,[[["count"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["rownumber"]],["bool"]]],[11,"ne","","",16,[[["self"],["rownumber"]],["bool"]]],[11,"eq","","",73,[[["sum"],["self"]],["bool"]]],[11,"ne","","",73,[[["sum"],["self"]],["bool"]]],[11,"eq","","",74,[[["self"],["function"]],["bool"]]],[11,"ne","","",74,[[["self"],["function"]],["bool"]]],[11,"eq","","",2,[[["grouping"],["self"]],["bool"]]],[11,"ne","","",2,[[["grouping"],["self"]],["bool"]]],[11,"eq","","",17,[[["insert"],["self"]],["bool"]]],[11,"ne","","",17,[[["insert"],["self"]],["bool"]]],[11,"eq","","",9,[[["onconflict"],["self"]],["bool"]]],[11,"eq","","",75,[[["self"],["joindata"]],["bool"]]],[11,"ne","","",75,[[["self"],["joindata"]],["bool"]]],[11,"eq","","",10,[[["self"],["join"]],["bool"]]],[11,"ne","","",10,[[["self"],["join"]],["bool"]]],[11,"eq","","",11,[[["sqlop"],["self"]],["bool"]]],[11,"ne","","",11,[[["sqlop"],["self"]],["bool"]]],[11,"eq","","",3,[[["ordering"],["self"]],["bool"]]],[11,"ne","","",3,[[["ordering"],["self"]],["bool"]]],[11,"eq","","",12,[[["self"],["order"]],["bool"]]],[11,"eq","","",20,[[["over"],["self"]],["bool"]]],[11,"ne","","",20,[[["over"],["self"]],["bool"]]],[11,"eq","","",13,[[["self"],["query"]],["bool"]]],[11,"ne","","",13,[[["self"],["query"]],["bool"]]],[11,"eq","","",4,[[["row"],["self"]],["bool"]]],[11,"ne","","",4,[[["row"],["self"]],["bool"]]],[11,"eq","","",21,[[["self"],["select"]],["bool"]]],[11,"ne","","",21,[[["self"],["select"]],["bool"]]],[11,"eq","","",14,[[["tabletype"],["self"]],["bool"]]],[11,"ne","","",14,[[["tabletype"],["self"]],["bool"]]],[11,"eq","","",5,[[["table"],["self"]],["bool"]]],[11,"ne","","",5,[[["table"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["union"]],["bool"]]],[11,"ne","","",22,[[["self"],["union"]],["bool"]]],[11,"eq","","",23,[[["self"],["update"]],["bool"]]],[11,"ne","","",23,[[["self"],["update"]],["bool"]]],[11,"eq","quaint","",0,[[["value"],["self"]],["bool"]]],[11,"ne","","",0,[[["value"],["self"]],["bool"]]],[11,"eq","quaint::ast","",24,[[["self"],["values"]],["bool"]]],[11,"ne","","",24,[[["self"],["values"]],["bool"]]],[11,"eq","quaint::connector","",34,[[["sslacceptmode"],["self"]],["bool"]]],[11,"eq","","",37,[[["self"],["sqlfamily"]],["bool"]]],[11,"eq","quaint::error","",52,[[["self"],["databaseconstraint"]],["bool"]]],[11,"ne","","",52,[[["self"],["databaseconstraint"]],["bool"]]],[11,"fmt","quaint::ast","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",71,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",72,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",73,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",75,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint::ast","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint::connector","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint::error","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint::serde","",79,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint::single","",67,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint::connector","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","quaint::error","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"div","quaint::ast","",69,[[],["self"]]],[11,"rem","","",69,[[],["self"]]],[11,"sub","","",69,[[],["self"]]],[11,"add","","",69,[[],["self"]]],[11,"mul","","",69,[[],["self"]]],[11,"index","quaint::connector","",39,[[["i"],["self"]],["value"]]],[11,"index","","",38,[[["i"],["self"]],["value"]]],[11,"try_from","","",33,[[["str"]],["result"]]],[11,"try_from","","",46,[[["str"]],["result"]]],[11,"to_sql","quaint","",0,[[["postgrestype"],["self"],["bytesmut"]],[["result",["isnull","box"]],["isnull"],["box",["stderror"]]]]],[11,"accepts","","",0,[[["postgrestype"]],["bool"]]],[11,"to_sql_checked","","",0,[[["type"],["self"],["bytesmut"]],[["result",["isnull","box"]],["isnull"],["box",["error"]]]]],[11,"deserialize_any","quaint::serde","",79,[[["visitor"]],["result"]]],[11,"deserialize_option","","",79,[[["visitor"]],["result"]]],[11,"deserialize_bool","","",79,[[["v"]],["result"]]],[11,"deserialize_i8","","",79,[[["v"]],["result"]]],[11,"deserialize_i16","","",79,[[["v"]],["result"]]],[11,"deserialize_i32","","",79,[[["v"]],["result"]]],[11,"deserialize_i64","","",79,[[["v"]],["result"]]],[11,"deserialize_u8","","",79,[[["v"]],["result"]]],[11,"deserialize_u16","","",79,[[["v"]],["result"]]],[11,"deserialize_u32","","",79,[[["v"]],["result"]]],[11,"deserialize_u64","","",79,[[["v"]],["result"]]],[11,"deserialize_f32","","",79,[[["v"]],["result"]]],[11,"deserialize_f64","","",79,[[["v"]],["result"]]],[11,"deserialize_char","","",79,[[["v"]],["result"]]],[11,"deserialize_str","","",79,[[["v"]],["result"]]],[11,"deserialize_bytes","","",79,[[["v"]],["result"]]],[11,"deserialize_byte_buf","","",79,[[["v"]],["result"]]],[11,"deserialize_string","","",79,[[["v"]],["result"]]],[11,"deserialize_unit","","",79,[[["v"]],["result"]]],[11,"deserialize_unit_struct","","",79,[[["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",79,[[["str"],["v"]],["result"]]],[11,"deserialize_seq","","",79,[[["v"]],["result"]]],[11,"deserialize_tuple","","",79,[[["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",79,[[["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",79,[[["v"]],["result"]]],[11,"deserialize_struct","","",79,[[["str"],["v"]],["result"]]],[11,"deserialize_enum","","",79,[[["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",79,[[["v"]],["result"]]],[11,"deserialize_ignored_any","","",79,[[["v"]],["result"]]],[11,"into_deserializer","quaint","",0,[[]]],[11,"to_sql","","",0,[[["self"]],[["tosqloutput"],["rusqlerror"],["result",["tosqloutput","rusqlerror"]]]]],[11,"ascend","quaint::ast","Change the order to `ASC`",31,[[],["orderdefinition"]]],[11,"descend","","Change the order to `DESC`",31,[[],["orderdefinition"]]],[11,"select","quaint::connector","Execute a `SELECT` query.",50,[[["select"],["self"]],[["pin",["box"]],["box",["future"]]]]],[11,"insert","","Execute an `INSERT` query.",50,[[["self"],["insert"]],[["pin",["box"]],["box",["future"]]]]],[11,"update","","Execute an `UPDATE` query, returning the number of…",50,[[["self"],["update"]],[["pin",["box"]],["box",["future"]]]]],[11,"delete","","Execute a `DELETE` query, returning the number of affected…",50,[[["self"],["delete"]],[["box",["future"]],["pin",["box"]]]]],[11,"server_reset_query","","Execute an arbitrary function in the beginning of each…",50,[[["transaction"],["self"]],[["box",["future"]],["pin",["box"]]]]],[11,"start_transaction","","Starts a new transaction",51,[[["self"]],[["pin",["box"]],["box",["future"]]]]]],"p":[[4,"Value"],[3,"Column"],[3,"Grouping"],[3,"Ordering"],[3,"Row"],[3,"Table"],[4,"Compare"],[4,"ConditionTree"],[4,"ExpressionKind"],[4,"OnConflict"],[4,"Join"],[4,"SqlOp"],[4,"Order"],[4,"Query"],[4,"TableType"],[3,"Delete"],[3,"RowNumber"],[3,"Insert"],[3,"SingleRowInsert"],[3,"MultiRowInsert"],[3,"Over"],[3,"Select"],[3,"Union"],[3,"Update"],[3,"Values"],[8,"Comparable"],[8,"Conjunctive"],[8,"Groupable"],[8,"IntoGroupByDefinition"],[8,"Joinable"],[8,"IntoOrderDefinition"],[8,"Orderable"],[8,"Aliasable"],[3,"SqliteParams"],[4,"SslAcceptMode"],[4,"ConnectionInfo"],[13,"Sqlite"],[4,"SqlFamily"],[3,"ResultRow"],[3,"ResultRowRef"],[3,"ResultSet"],[3,"Transaction"],[3,"MysqlUrl"],[3,"Mysql"],[3,"PostgresUrl"],[3,"PostgreSql"],[3,"Sqlite"],[8,"GetRow"],[8,"TakeRow"],[8,"ToColumnNames"],[8,"Queryable"],[8,"TransactionCapable"],[4,"DatabaseConstraint"],[4,"ErrorKind"],[13,"DatabaseDoesNotExist"],[13,"DatabaseAccessDenied"],[13,"DatabaseAlreadyExists"],[13,"AuthenticationFailed"],[13,"UniqueConstraintViolation"],[13,"NullConstraintViolation"],[13,"ForeignKeyConstraintViolation"],[13,"LengthMismatch"],[13,"TlsError"],[13,"ValueOutOfRange"],[3,"Error"],[3,"Builder"],[3,"Quaint"],[3,"Quaint"],[8,"Visitor"],[3,"Expression"],[3,"AggregateToString"],[3,"Average"],[3,"Count"],[3,"Sum"],[3,"Function"],[3,"JoinData"],[3,"SslParams"],[3,"ResultSetIterator"],[3,"PooledConnection"],[3,"ValueDeserializer"],[3,"Mysql"],[3,"Postgres"],[3,"Sqlite"],[6,"GroupByDefinition"],[6,"OrderDefinition"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);